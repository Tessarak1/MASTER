load location .
fmod PATH is
    protecting LIST-LOCATION .
    protecting INT .

    sorts Path PathSet .
    subsort Path < PathSet .

    op es : -> PathSet [ctor] .
    op error : -> Path [ctor] .
    op {__} : Location Location -> Path [ctor comm] .
    op __ : PathSet PathSet -> PathSet [assoc comm id: es] .

    ***Checks if the first int is in the interval between the two other ints.
    op _inRange(_,_) : Int Int Int -> Bool .
    op _inRange(_) : Location Path -> Bool .
    op getLocations : Path -> List-Location .

    vars I I2 I3 : Int .
    vars X X2 X3 Y Y2 Y3 : Int .

    eq {(X,Y) (X2,Y2)} {(X,Y) (X2,Y2)} = {(X,Y) (X2,Y2)} .
    ceq I inRange(I2, I3) = true if I <= max(I2,I3) and I >= min(I2,I3) .
    eq I inRange(I2, I3) = false [owise] .

    ceq (X,Y) inRange({(X2,Y2) (X3,Y3)}) = true if X inRange(X2,X3) and Y inRange(Y2,Y3) .
    eq (X,Y) inRange({(X2,Y2) (X3,Y3)}) = false [owise] .

    eq getLocations({(X, Y) (X2, Y2)}) = (X,Y) (X2,Y2) .
endfm
