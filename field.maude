load auctioneer .
load intersection .
omod FIELD is
    protecting INTERSECTION .
    protecting MESSAGE .
    protecting TIMER .
    protecting AUCTIONEER .

    sort GrowingState .
    sort Level .

    class Field | state : GrowingState, 
        waterLevel : Level, 
        fertilizerLevel : Level, 
        waterTimer : Timer, 
        fertilizerTimer : Timer, 
        growTimer : Timer, 
        growingArea : Area .

    subclass Field < PassIntersection Auctioneer .

    ops low good : -> Level [ctor] .
    ops empty growing harvest : -> GrowingState [ctor] .
    op taskComplete : Object Tid -> Object .
    ops waterTime fertilizerTime growTime : Object -> Time .

    var S : String .
    var L L2 : Level .
    vars T T2 : Time .
    vars TR TR2 TR3 TR4 : Timer .
    var GS : GrowingState .
    var N : Nat .
    var TT : TaskType .
    var AU : Auction .
    var B : Bid .

    eq taskComplete(< S : Field | waterTimer : TR, waterLevel : low, taskNr : N >, [S, watering, N]) = < S : Field | waterLevel : good, waterTimer : reset(TR), taskNr : N + 1 > .
    eq taskComplete(< S : Field | fertilizerTimer : TR, fertilizerLevel : low, taskNr : N >, [S, fertilize, N]) = < S : Field | fertilizerLevel : good, fertilizerTimer : reset(TR), taskNr : N + 1 > .
    eq taskComplete(< S : Field | state : empty, taskNr : N >, [S, plant, N]) = < S : Field | state : growing, taskNr : N + 1 > .
    eq taskComplete(< S : Field | state : harvest, growTimer : TR, taskNr : N >, [S, harvest, N]) = < S : Field | state : empty, growTimer : reset(TR), taskNr : N + 1 > .
    eq decreaseTimers(< S : Field | waterLevel : good, fertilizerLevel : good, waterTimer : TR, fertilizerTimer : TR2, state : growing, growTimer : TR3 >, T) =
        < S : Field | waterTimer : decrease(TR, T), fertilizerTimer : decrease(TR2, T), growTimer : decrease(TR3, T) > .
    eq decreaseTimers(< S : Field | waterTimer : TR, fertilizerTimer : TR2 >, T) =
        < S : Field | waterTimer : decrease(TR, T), fertilizerTimer : decrease(TR2, T) > [owise] .
    ***can I generalize these? only do the one that does not have corresponding auction in auctions?
    eq testTime(< S : Field | auctions : AUS)
    eq waterTime(< S : Field | auctions : [Task: [S, watering, N] TR | B] AU >) = ratInf .
    eq waterTime(< S : Field | waterTimer : [cur: T - base: T2] >) = T [owise] .
    eq fertilizerTime(< S : Field | auctions : [Task: [S, fertilize, N] TR | B] AU >) = ratInf .
    eq fertilizerTime(< S : Field | fertilizerTimer : [cur: T - base: T2] >) = T [owise] .
    eq growTime(< S : Field | auctions : [Task: [S, harvest, N] TR | B] AU >) = ratInf .
    eq growTime(< S : Field | growTimer : [cur: T - base: T2] >) = T [owise] .
    eq minExpire(< S : Field | >) = min(growTime(< S : Field | >), min(waterTime(< S : Field | >), fertilizerTime(< S : Field | >))) .

    crl [depletedWater] :
        < S : Field | waterLevel : good, waterTimer : TR >
        =>
        < S : Field | waterLevel : low >
        if expired(TR) .
    crl [depletedFertilizer] :
        < S : Field | fertilizerLevel : good, fertilizerTimer : TR >
        =>
        < S : Field | fertilizerLevel : low >
        if expired(TR) .
    crl [finishedGrowth] :
        < S : Field | state : growing, growTimer : TR >
        =>
        < S : Field | state : harvest >
        if expired(TR) .
    crl [startWaterAuction] :
        < S : Field | waterLevel : low, state : growing, growTimer : TR, taskNr : N, auctions : AU >
        =>
        startAuction(< S : Field | >, [S, watering, N])
        if closed([S, watering, N], AU) and expired(TR) .
    crl [startFertilizerAuction] :
        < S : Field | fertilizerLevel : low, state : growing, growTimer : TR, taskNr : N, auctions : AU >
        =>
        startAuction(< S : Field | >, [S, fertilize, N])
        if closed([S, fertilize, N], AU) and expired(TR) .
    crl [startHarvestAuction] :
        < S : Field | state : harvest, taskNr : N, auctions : AU >
        =>
        startAuction(< S : Field | >, [S, harvest, N])
        if closed([S, harvest, N], AU) .
endom