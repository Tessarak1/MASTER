load map .
load nat-inf .
load sorts .
omod INTERSECTION-TRIPLE is
    protecting NAT-INF .
    protecting INTERSECTION .

    sort INPTriple .

    op [_,_,_] : Object NatInf Object -> INPTriple [ctor] .
    op getCurDist : INPTriple -> NatInf .
    op getBaseIntersection : INPTriple -> Object .
    
    vars I I' : Object .
    var NI : NatInf .

    eq getCurDist([I, NI, I']) = NI .
    eq getBaseIntersection([I, NI, I']) = I .
endom

***Priority queue sorting INPairs based on Nat value.
omod INPTRIPLE-QUEUE is
    protecting INTERSECTION-TRIPLE .

    sort PQueue .
    subsort INPTriple < PQueue .

    op nil : -> PQueue [ctor] .
    op __ : PQueue PQueue -> PQueue [assoc id: nil ctor] .

    var INP INP' : INPTriple .
    var PQ : PQueue .
    vars S S' S2 : String .
    vars NI NI2 : NatInf .
    vars I I' I2 I2' : Object .

    op put : INPTriple PQueue -> PQueue .
    eq put(nil, PQ) = PQ .
    eq put(INP, nil) = INP . 
    eq put(INP, INP' PQ) = if getCurDist(INP) < getCurDist(INP') then INP INP' PQ else INP' put(INP, PQ) fi .

    op delete : INPTriple PQueue -> PQueue .
    eq delete(INP, nil) = nil .
    eq delete(INP, INP PQ) = PQ .
    eq delete(INP, INP' PQ)= INP' delete(INP, PQ) .

    ***Retrieve the INPTriple that has the intersection given by the string.
    op get : String PQueue -> INPTriple .
    eq get(S, nil) = nil .
    eq get(S, [< S : Intersection | >, NI, I] PQ) = [< S : Intersection | >, NI, I] .
    eq get(S, [< S' : Intersection | >, NI, I] PQ) = get(S, PQ) .

    op in : INPTriple PQueue -> Bool .
    eq in(INP, nil) = false .
    eq in(INP, INP PQ) = true .
    eq in(INP, INP' PQ) = in(INP, PQ) .

    ***Version of in used when checking if the id of an intersection is within the priority queue.
    op idIn : String PQueue -> Bool .
    eq idIn(S, nil) = false .
    eq idIn(S, [< S : Intersection | >, NI, < S' : Intersection | >] PQ) = true .
    eq idIn(S, [< S' : Intersection | >, NI, < S2 : Intersection | >] PQ) = idIn(S, PQ) .
    
    ***Set new value for the first INPTriple to the second.
    op update : INPTriple INPTriple PQueue -> PQueue .
    eq update(INP, INP', nil) = nil .
    eq update(INP, INP, PQ) = PQ .
    eq update([I, NI, I'], [I, NI2, I2'], PQ) = if in([I, NI, I'],PQ) then put([I, NI2, I2'], delete([I, NI, I'], PQ)) else PQ fi .

    ***Returns first value of queue
    op first : PQueue -> INPTriple .
    eq first(nil) = nil .
    eq first(INP PQ) = INP .

    op deleteFirst : PQueue -> PQueue .
    eq deleteFirst(nil) = nil .
    eq deleteFirst(INP PQ) = PQ .
endom

***The module contains the different operations needed for when a robot needs to find the shortest path to an intersection, or when it needs to cover the area of a growing location.
omod PATHFINDER is
    protecting INPTRIPLE-QUEUE .
    protecting LIST-LOCATION .
    protecting MAP .
    protecting INT .
    protecting SORTS .

    op placeholder : -> Object .

    op convert : Configuration Object -> PQueue .
    op oneNeighbor : INPTriple INPTriple PQueue -> PQueue .
    op recurNeighborSearch : INPTriple PQueue -> PQueue .
    op recurDijkstraSearch : PQueue -> PQueue .
    op dijkstraSearch : Configuration Object Object -> List-Location .
    op $coverArea : Location Location Location Location Bool -> List-Location .
    op backToStart : Location Location -> List-Location .
    op coverArea : Location Area -> List-Location .

    var M : Map .
    vars I I' I2 I2' : Object .
    vars INP INP' : INPTriple .
    vars S S' S2 S2' : String .
    vars X Y : Int .
    vars X2 Y2 : Int .
    vars X3 Y3 : Int .
    var LL : List-Location .
    var CONF : Configuration .
    var NI NI2 : NatInf .
    var PQ : PQueue .
    var OD : Oid .
    var OSET : OidSet .

    eq placeholder = < "Placeholder" : Intersection | > .
    ***convert a list of intersections into a priority queue with starting intersection having distance 0 and the others distance natInf.
    ***INPUT: set of Intersections that make up the map, and a starting intersection
    ***OUTPUT: Priority queue consisting of the intersections that were used as argument. The INPTriple matching the starting intersection has distance 0, the others have distance natInf.
    eq convert(none, I ) = nil .
    eq convert(I CONF, I) = put([I, 0, placeholder], convert(CONF, I)) .
    eq convert(I CONF, I') = put([I, natInf, placeholder], convert(CONF, I' )) .
    
    ***Used in recurNeighborSearch, takes in two INPTriples, the first being the one whose neighbors we are updating, the second being a neighbor  and the priority queue. update distance if applicable.
    eq oneNeighbor([< S : Intersection | >, NI, < S' : Intersection | >], [< S2 : Intersection | >, NI2, I], PQ) = if distance(< S : Intersection | >, < S2 : Intersection | > ) + NI < NI2 then update([< S2 : Intersection | >, NI2, I], [< S2 : Intersection | >, distance(< S : Intersection | >, < S2 : Intersection | >) + NI, < S : Intersection | >], PQ) else PQ fi .

    ***Go through all of the neighbors of an intersection and update distances
    eq recurNeighborSearch([ < S : Intersection | neighbors : none >, NI, < S' : Intersection | > ], PQ) = PQ .
    eq recurNeighborSearch([ < S : Intersection | neighbors : OD OSET >, NI, < S' : Intersection | >], PQ) = if idIn(OD, PQ) then recurNeighborSearch([ < S : Intersection | neighbors : OSET >, NI, < S' : Intersection | >], oneNeighbor([ < S : Intersection | neighbors : OD OSET >, NI, < S' : Intersection | >], get(OD,PQ), PQ)) else
        recurNeighborSearch([ < S : Intersection | neighbors : OSET >, NI, < S' : Intersection | >], PQ) fi .

    eq recurDijkstraSearch(nil) = nil .
    eq recurDijkstraSearch(INP PQ) = INP recurDijkstraSearch(recurNeighborSearch(INP, PQ)) .

    op buildPath : PQueue INPTriple INPTriple -> List-Location .
    eq buildPath(PQ, INP, INP) = nil .
    eq buildPath(PQ, INP, [< S : Intersection | location : (X,Y) >, NI, < S' : Intersection | >]) = buildPath(PQ, INP, get(S', PQ)) (X,Y) .

    ***DijkstraSearch takes in a set of intersections and two intersections, one representing the start point and one representing the goal.
    eq dijkstraSearch(CONF, I, I) = nil .
    eq dijkstraSearch(CONF, < S : Intersection | >, < S' : Intersection | >) =
        buildPath(recurDijkstraSearch(convert(CONF, < S : Intersection | >)),
            get(S, recurDijkstraSearch(convert(CONF, < S : Intersection | >))),
            get(S', recurDijkstraSearch(convert(CONF, < S : Intersection | >)))) .
    
    eq $coverArea((X,Y), (X2, Y2), (X,Y), (X2,Y2), true) = (X,Y) (X2, Y2) .
    eq $coverArea((X,Y), (X2, Y2), (X,Y), (X2,Y2), false) = (X2, Y2) (X,Y) .
    eq $coverArea((X,Y), (X2, Y), (X,Y2), (X2,Y2), true) = if Y2 > Y then (X,Y) (X2, Y) $coverArea((X, Y + 1), (X2, Y + 1), (X, Y2), (X2, Y2), false) else (X,Y) (X2, Y) $coverArea((X, Y - 1), (X2, Y - 1), (X, Y2), (X2, Y2), false) fi .
    eq $coverArea((X,Y), (X2, Y), (X,Y2), (X2,Y2), false) = if Y2 > Y then (X2, Y) (X,Y) $coverArea((X, Y + 1), (X2, Y + 1), (X, Y2), (X2, Y2), true) else (X2, Y) (X,Y) $coverArea((X, Y - 1), (X2, Y - 1), (X, Y2), (X2, Y2), true) fi .
    eq $coverArea((X, Y), (X, Y2), (X2, Y), (X2,Y2), true) = if X2 > X then (X,Y) (X, Y2) $coverArea((X + 1, Y), (X + 1, Y2), (X2, Y), (X2,Y2), false) else (X,Y) (X, Y2) $coverArea((X - 1, Y), (X - 1, Y2), (X2, Y), (X2, Y2), false) fi .
    eq $coverArea((X, Y), (X, Y2), (X2, Y), (X2,Y2), false) = if X2 > X then (X, Y2) (X,Y) $coverArea((X + 1, Y), (X + 1, Y2), (X2, Y), (X2,Y2), true) else (X, Y2) (X,Y) $coverArea((X - 1, Y), (X - 1, Y2), (X2, Y), (X2, Y2), true) fi .

    ***Creates a two step path from the first location to the second.
    eq backToStart((X,Y), (X2, Y2)) = (X,Y2) (X2, Y2) .

    ***Takes in a starting point, and a list-location representing the four corners of an area, and returns a path that covers the whole area.
    eq coverArea((X,Y3), area((X,Y), (X2,Y), (X,Y2), (X2,Y2))) = $coverArea((X,Y), (X,Y2), (X2,Y), (X2,Y2), true) backToStart(last($coverArea((X,Y), (X,Y2), (X2,Y), (X2,Y2), true)), (X,Y3)) .
    eq coverArea((X2,Y3), area((X,Y), (X2,Y), (X,Y2), (X2,Y2))) = $coverArea((X2,Y), (X2,Y2), (X,Y), (X,Y2), true) backToStart(last($coverArea((X2,Y), (X2,Y2), (X,Y), (X,Y2), true)), (X2,Y3)) .
    eq coverArea((X3,Y), area((X,Y), (X2,Y), (X,Y2), (X2,Y2))) = $coverArea((X,Y), (X2,Y), (X,Y2), (X2,Y2), true) backToStart(last($coverArea((X,Y), (X2,Y), (X,Y2), (X2,Y2), true)), (X3,Y)) .
    eq coverArea((X3,Y2), area((X,Y), (X2,Y), (X,Y2), (X2,Y2))) = $coverArea((X,Y2), (X2,Y2), (X,Y), (X2,Y), true) backToStart(last($coverArea((X,Y2), (X2,Y2), (X,Y), (X2,Y), true)), (X3,Y2)) .
endom