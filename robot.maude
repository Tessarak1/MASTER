***(Superclass for ht-robot and worker-robot classes. Contains the common operations
attributes and rules between the two types of robots. )***
load time-inf .
load pathfinder .
load message .
load map .
load field .
load human .
load obstacle .
load buildings .
load auctioneer .
omod ROBOT is 
    protecting AUCTIONEER .
    protecting MESSAGE .
    protecting OBSTACLE .
    protecting MAP .
    protecting HUMAN .
    protecting TIME-INF .
    protecting FIELD .
    protecting PATHFINDER .
    protecting BUILDINGS .

    sort CargoLevel .
    sorts WorkerCargo TransporterCargo Cargo .
    sorts Seed Water Fertilizer Produce .
    ***Type of object detected and Identificator.
    sort Representation .
    sort TaskStatus . 
    sorts WorkState ActiveWork TimedWork .
    sort Information .

    subsorts Location Direction < Information .
    subsort Tid < TaskStatus .
    subsorts ActiveWork TimedWork < WorkState .
    subsort Seed Water Fertilizer < WorkerCargo .
    subsort Produce < TransporterCargo .
    subsort TransporterCargo WorkerCargo < Cargo .

    class Robot | detectionRange : Nat, cargoLevel : CargoLevel, curCargo : Cargo,
        detected : Representation, obstructionPoints : List-Location,
        curTask : TaskStatus, workState : WorkState .
    class Worker .
    class Transporter .
    
    subclass Worker Transporter < Robot < Entity Auctioneer .

    op water : -> Water [ctor] .
    op fertilizer : -> Fertilizer [ctor] .
    op seed : -> Seed [ctor] .

    op _;_ : Information Information -> Information [ctor assoc comm id: noInfo] .
    op noInfo : -> Information [ctor] .
    op TaskNr:_ : Nat -> Information [ctor] .
    op detectedSpeed : Rat -> Information [ctor] .
    op [W:_ F:_ H:_] : Level Level GrowingState -> Information [ctor] .
    op noTask : -> TaskStatus .

    ops noWork : -> WorkState [ctor] .
    op [__] : Oid TaskType -> ActiveWork [ctor] .
    op [___] : Oid TaskType Time -> TimedWork [ctor] .
    ops empty full : -> CargoLevel [ctor] .
    op seed : -> Seed [ctor] .
    op detectionBorder : Object -> Location .
    op replanPath : Object Object Location -> Object .

    op nil : -> Representation [ctor] .
    op __ : Representation Representation -> Representation [assoc comm id: nil ctor] .
    ***Todo: refine this based on what information the robot should know.
    op {_:_|_} : Oid Cid Information -> Representation .
    ***Checks if an object already is in the representation .
    op _notIn_ : String Representation -> Bool .
    ***checks if the given represenation is incompatible with path. If continuing the path would lead to a head-on collision.
    ops breaksPath $breaksPath : List-Location Representation -> Bool .
    op canCompleteNow : Object TidSet -> Bool .
    op $parseTasksGL : Representation -> TidSet .
    op parseTasksGL : Representation -> TidSet .
    op assignTask : Object Tid -> Object .
    op calculateBid : Object Tid Object -> Rat .
    op prepareAuction : Object TidSet -> Configuration .
    op auctionTimer : -> Timer .
    ops rejectTask rejectMsg : Object -> Bool .
    op startWorkGL : Object -> Object .

    op SAFE-SPEED : -> Rat .
    ops REMOVAL-TIME REPAIR-TIME : -> Time .
    op WORK-RANGE : -> Rat .
    ops needsResupply needsCPoint : Object Tid -> Bool .
    ops resupplyLocCheck cPointLocCheck : Object Tid Location -> List-Location .
    op performChecks : Object Tid Configuration -> List-Location .
    op $removalPlanPath : Object List-Location -> Object .
    op $planPathLocations : Object Tid Configuration -> List-Location .
    op $planPath : Object List-Location List-Location -> List-Location .
    op planPath : Object Tid Configuration -> List-Location .

    op crashPrevention : Object Representation -> Object .

    vars CONF CONF2 : Configuration .
    vars S S2 S2' S3 S4 S5 : String .
    vars X Y : Rat .
    vars X2 Y2 : Rat .
    vars X3 Y3 : Rat .
    vars N N2 : Nat .
    var A : Area .
    vars LL LL2 : List-Location .
    vars L L2 : Level .
    var GS : GrowingState .
    var TC : TransporterCargo .
    var PS : PathSet .
    var MC : MsgContent .
    var CID : Cid .
    var I : Information .
    vars D D2 : Direction .
    vars SP SP2 : Rat .
    var STATE : State .
    var REP : Representation .
    vars OS OS2 : OidSet .
    var OL : OidList .
    var T : Timer .
    vars TIME TIME2 : Time .
    vars TID TID2 : Tid .
    var TIDS : TidSet .
    vars AS AS2 : AttributeSet .
    var CL : CargoLevel .
    var FUNC : FunctioningState .
    var INC : IncapacitatedState .

    vars TT TT2 : TaskType .
    var TS : TaskStatus .
    var TPT : TransporterTask .
    var WT : WorkerTask .
    var AW : ActiveWork .
    vars WS WS2 : WorkState .
    var TW : TimedWork .
    var AU : Auction .
    var B : Bid .

    eq WORK-RANGE = 1 .
    eq REMOVAL-TIME = 5 .
    eq REPAIR-TIME = 5 .
    eq SAFE-SPEED = 1 .
    eq decreaseTimers(< S : Robot | state : removing, workState : [S2 (removeAt (X,Y)) TIME] >, TIME2) = < S : Robot | workState : [S2 (removeAt (X,Y)) (TIME monus TIME2)] > .
    eq decreaseTimers(< S : Robot | >, TIME) = < S : Robot | > [owise] .
    eq rejectTask(< S : Robot | state : STATE, curTask : TS >) = rejectMsg(< S : Robot | >) or (TS =/= noTask) .
    eq rejectMsg(< S : Robot | state : INC >) = true .
    eq rejectMsg(< S : Robot | >) = false [owise] .
    eq needsCPoint(< S : Worker | >, TID) = false .
    eq needsCPoint(< S : Transporter | cargoLevel : CL >, TID) = CL == full .
    eq needsResupply(< S : Worker | curCargo : fertilizer >, [S2, watering, N]) = true .
    eq needsResupply(< S : Worker | curCargo : water >, [S2, fertilize, N]) = true .
    eq needsResupply(< S : Worker | cargoLevel : empty >, TID) = true .
    eq needsResupply(< S : Robot | >, TID) = false [owise] .
    eq cPointLocCheck(< S : Robot | >, TID, (X,Y)) = if needsCPoint(< S : Robot | >, TID) then (X,Y) else nil fi .
    eq resupplyLocCheck(< S : Robot | >, TID, (X,Y)) = if needsResupply(< S : Robot | >, TID) then (X,Y) else nil fi .
    eq performChecks(< S : Robot | >, TID, < S2 : ResupplyStation | location : (X,Y) > < S3 : CollectionStation | location : (X2,Y2) > CONF) =
        resupplyLocCheck(< S : Robot | >, TID, (X,Y)) cPointLocCheck(< S : Robot | >, TID, (X2,Y2)) .
    eq canCompleteNow(< S : Worker | state : FUNC >, [S2, removeAt (X,Y), N]) = true .
    eq canCompleteNow(< S : Worker | state : FUNC >, [S2, repairAt (X,Y), N]) = true .
    eq canCompleteNow(< S : Worker | state : FUNC, cargoLevel : full, curCargo : water >, [S2, watering, N]) = true .
    eq canCompleteNow(< S : Worker | state : FUNC, cargoLevel : full, curCargo : fertilizer >, [S2, fertilize, N]) = true .
    eq canCompleteNow(< S : Transporter | cargoLevel : empty >, [S2, harvest, N]) = true .
    eq canCompleteNow(< S : Robot | state : INC >, TID) = false .
    ceq canCompleteNow(< S : Robot | curTask : TID >, TID2) = false if TID =/= noTask .
    eq canCompleteNow(< S : Robot | >, TIDS) = false [owise] .
    eq $removalPlanPath(< S : Map | paths : PS >, LL) = removeConnection(findPath(LL, PS), < S : Map | >) .
    eq $planPathLocations(< S : Robot | location : (X,Y) >, [S2, TT, N], < S2 : Locatable | location : (X2,Y2) > CONF) =
        (X,Y) performChecks(< S : Robot | >, [S2, TT, N], < S2 : Locatable | location : (X2,Y2) > CONF) (X2,Y2) .
    eq $planPath(< S : Map | allIntersections : CONF >, LL, LL2) = dijkstraChain(getIntersections($removalPlanPath(newIntersection(LL, < S : Map | >), LL2)), LL) .
    eq calculateBid(< S : Robot | >, TID, < S2 : Map | >) = listLength(planPath(< S : Robot | >, TID, < S2 : Map | >)) .
    ***Gotta add the obstacle to the Conf that is sent in
    eq planPath(< S : Robot | obstructionPoints : LL >, [S2, TT, N], < S3 : Map | allIntersections : CONF > CONF2) =
        $planPath(< S3 : Map | >,
            $planPathLocations(< S : Robot | >, [S2, TT, N], CONF CONF2), LL) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : north >) = (X, Y + N) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : east >) = (X + N, Y) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : south >) = (X, Y - N) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : north >) = (X - N, Y) .

    eq S notIn {S : CID | (X,Y) ; I} REP = false .
    eq S notIn REP = true [owise] .

    ceq $breaksPath((X,Y) (X,Y2), {S2 : CID | (X,Y3) ; north ; I}) = true if Y > Y2 .
    ceq $breaksPath((X,Y) (X2,Y), {S2 : CID | (X3,Y) ; east ; I}) = true if X > X2 .
    ceq $breaksPath((X,Y) (X,Y2), {S2 : CID | (X,Y3) ; south ; I}) = true if Y < Y2 .
    ceq $breaksPath((X,Y) (X2,Y), {S2 : CID | (X3,Y) ; west ; I}) = true if X < X2 .
    eq $breaksPath(LL, REP) = false [owise] .
    ceq breaksPath(LL, {S2 : CID | (X,Y) ; I}) = false if between((X,Y), LL) == nil .
    eq breaksPath(LL, {S2 : Obstacle | (X,Y) ; I}) =
        if between((X,Y), LL) == nil then
            false
        else
            true
        fi .
    eq breaksPath(LL, {S2 : CID | (X,Y) ; D ; I}) = $breaksPath(between((X,Y), LL), {S2 : CID | (X,Y) ; D ; I}) [owise] .


    rl [replanPath] :
        < S : Robot | state : replanning, remainingPath : LL (X,Y), detected : nil, curTask : TID >
        < S3 : Map | >
        =>
        < S : Robot | state : moving, remainingPath : planPath(< S : Robot | >, TID, < S3 : Map | >) >
        < S3 : Map | > .

    rl [rcvObstacleRemovedMsg] : 
        < S : Robot | obstructionPoints : LL >
        msg removed (X,Y) from S2 to S
        =>
        < S : Robot | obstructionPoints : remove(LL, (X,Y)) > .
    crl [rcvTaskMsgBusy] :
        < S : Robot | >
        msg TID from S2 to S
        =>
        < S : Robot | >
        msg busy TID from S to S2 
        if rejectTask(< S : Robot  | >) .
    crl [rcvTaskMsgFree] :
        < S : Robot | location : (X,Y), obstructionPoints : LL >
        < S2 : Map | allIntersections : CONF >
        msg [S3, TT, N] from S3 to S
        =>
        < S : Robot | >
        < S2 : Map | >
        (msg bid calculateBid(< S : Robot | >, [S3, TT, N], < S2 : Map | >) on [S3, TT, N] from S3 to S)
        if not rejectTask(< S : Robot | >) .
    rl [winAuction] :
        < S : Robot | >
        msg won TID from S2 to S
        =>
        if rejectMsg(< S : Robot | >)
        then
            < S : Robot | >
            msg reject TID from S to S2
        else
            < S : Robot | state : planningPath, curTask : TID >
            msg accept TID from S to S2 
        fi .

    rl [detectRobot] :
        < S : Robot | location : (X,Y), remainingPath : LL, detected : {S2 : Robot | D ; detectedSpeed(SP); (X2,Y2)} REP >
        =>
        ***This has to be refined to detect deadlocks, and to follow as well . or is slowdown done elsewhere?
        ***instead of one rule for detect robot have cluases based on direction and speed .
        (msg requestPath path((X,Y) LL) from S to S2)
        < S : Robot | > .
    rl [detectObstacle] : 
        < S : Robot | location : (X,Y), remainingPath : LL (X2,Y2), detected : {S2 : Obstacle | (X3,Y3) ; I} REP, obstructionPoints : LL2, workers : OS > 
        < S2 : Obstacle | location : (X3,Y3) >
        < S3 : Map | > 
        =>
        if canCompleteNow(< S : Robot | >, [S2, removeAt (X3,Y3), 1])
        then
            ***crash prot is only needed if directly approaching.
            ***do crash prot, which should set destination to working range less than destination compared to location.
            ***if between (X,Y) and (X2,Y2) (first loc of remainingpath.) then we do crash prot first

            < S : Robot | state : moving,
                remainingPath : planPath(< S : Robot | >, [S2, removeAt (X3,Y3), 1], < S3 : Map | > < S2 : Obstacle | >),
                detected : REP, curTask : [S2, removeAt (X3,Y3), 1] >
            < S2 : Obstacle | >
            < S3 : Map | >
        else
            if between((X3,Y3), (X,Y) LL (X2,Y2)) =/= nil
            then
                startAuction(< S : Robot | state : replanning, detected : REP, obstructionPoints : (X3,Y3) LL2 >, [S2, removeAt (X3,Y3), 1])
                < S2 : Obstacle | >
                < S3 : Map | >
            else
                startAuction(< S : Robot | detected : REP, obstructionPoints : (X3, Y3) LL2 >, [S2, removeAt (X3,Y3), 1])
                < S2 : Obstacle | >
                < S3 : Map | >
            fi
        fi .

    crl [startObstacleRemoval] :
        < S : Robot | location : (X,Y), curTask : [S2, removeAt (X2,Y2), N], workState : noWork >
        < S2 : Obstacle | location : (X2,Y2) >
        =>
        < S : Robot | state : removing, workState : [S2 (removeAt (X2,Y2)) REMOVAL-TIME] >
        < S2 : Obstacle | > 
        if canCompleteNow(< S : Robot | >, [S2, removeAt (X2,Y2), N]) and distance((X,Y), (X2,Y2)) <= WORK-RANGE .
    rl [finishObstacleRemoval] :
        < S : Robot | location : (X,Y), curTask : [S2, removeAt (X2,Y2), N], workState : [S2 (removeAt (X2,Y2)) 0],
            workers : OS, transporters : OS2 >
        < S2 : Obstacle | location : (X2,Y2) >
        =>
        < S : Robot | state : idle, curTask : noTask, workState : noWork >
        broadcast(S, removed (X2,Y2), OS OS2) .
    crl [startResupply] :
        < S : Robot | state : FUNC, location : (X,Y), curTask : TID >
        < S2 : Map | allIntersections : < S3 : ResupplyStation | location : (X,Y), AS > CONF >
        =>
        < S : Robot | state : resupplying > 
        < S2 : Map | > 
        if needsResupply(< S : Robot | >, TID) .
    rl [finishResupply] :
        < S : Robot | location : (X,Y), state : resupplying, curTask : [S2, TT, N] >
        < S3 : Map | allIntersections : < S4 : ResupplyStation | location : (X,Y), AS > CONF > 
        =>
        if (TT == watering)
        then
            < S : Robot | state : moving, curCargo : water, cargoLevel : full >
            < S3 : Map | >
        else
            if (TT == fertilize)
            then
                < S : Robot | state : moving, curCargo : fertilizer, cargoLevel : full >
                < S3 : Map | >
            else
                < S : Robot | state : moving >
                < S3 : Map | >
            fi
        fi .
    rl [startGrowingLocTask] :
        < S : Robot | location : (X,Y), curTask : [S2, TT, N], remainingPath : nil, workState : noWork >
        < S2 : Field | growingArea : A, location : (X,Y) >
        =>
        if canCompleteNow(< S : Robot | >, [S2, TT,N])
        then
            < S : Robot | remainingPath : coverArea((X,Y), A), workState : [S2 TT], speed : 1, state : moving >
            < S2 : Field | >
        else
            < S : Robot | state : planningPath >
            < S2 : Field | >
        fi .
    rl [finishGrowingLocTask] :
        < S : Robot | location : (X,Y), curTask : [S2, TT, N], remainingPath : nil, workState : [S2 TT] >
        < S2 : Field | location : (X,Y) >
        =>
        < S : Robot | cargoLevel : empty, curTask : noTask, workState : noWork >
        taskComplete(< S2 : Field | >, [S2, TT, N]) .  
endom