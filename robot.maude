***(Superclass for ht-robot and worker-robot classes. Contains the common operations
attributes and rules between the two types of robots. )***
load list-location .
load time-inf .
load pathfinder .
load sorts .
load message .
load map .

omod ROBOT is 
    protecting MESSAGE .
    protecting MAP .
    protecting SORTS .
    protecting TIME-INF .
    protecting RAT .
    protecting LIST-LOCATION .
    protecting INT .
    protecting PATHFINDER .

    sort Direction .
    sort CargoLevel .
    sorts WorkerCargo TransporterCargo .
    sort TransporterState .
    sort MovementType .
    ***Workers can plant fields or greenhouses, so they should have seeds as part of cargo.
    sort Seed .
    subsort Seed Water Fertilizer < WorkerCargo .
    subsort Grain Vegetable Fruit < TransporterCargo .
    subsort Empty Full < CargoLevel .

    ops north east south west : -> Direction [ctor] .
    ops flying ground : -> MovementType [ctor] .
    ops saladSeed potatoSeed turnipSeed pepperSeed tomatoSeed cucumberSeed wheatSeed ryeSeed peachSeed : -> Seed [ctor] .
    ops harvesting transporting : -> TransporterState .

    class Robot | location : Location, direction : Direction, speed : Int, remainingPath : List-Location, cargoLevel : CargoLevel .
    class Worker | curCargo : WorkerCargo, movementType : MovementType .
    class Transporter | state : TransporterState .
    subclass Worker Transporter < Robot .

    var CONF : Configuration .
    vars S S' S2 : String .
    vars X Y : Int .
    vars X2 Y2 : Int .
    var LL : List-Location .

    ***used to set the robot along a new direction when it arrives at an intersection.
    op setDirection : Location Location -> Direction .
    ceq setDirection((X,Y), (X2,Y2)) = north if Y2 > Y .
    ceq setDirection((X,Y), (X2,Y2)) = east if X2 > X .
    ceq setDirection((X,Y), (X2,Y2)) = south if Y2 < Y .
    ceq setDirection((X,Y), (X2,Y2)) = west if X2 < X .

    rl [finish] :
        < S : Robot | location : (X , Y), remainingPath : (X, Y) > 
        =>
        < S : Robot | speed : 0, remainingPath : nil > .
    rl [nextIntersection] :
        < S : Robot | location : (X , Y), remainingPath : (X , Y) (X2, Y2) LL > 
        =>
        < S : Robot | direction : setDirection((X , Y), (X2, Y2)), remainingPath : (X2, Y2) LL > .
    rl [rcvWaterMessage] :
        < S : Worker | location : (X , Y), remainingPath : nil > < S' : Map | allIntersections : CONF > 
        (msg water S2 from S2 to worker)
        =>
        < S : Worker | remainingPath : (X,Y) dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)) > 
        < S' : Map | allIntersections : CONF > .
endom