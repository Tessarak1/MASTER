***(Superclass for ht-robot and worker-robot classes. Contains the common operations
attributes and rules between the two types of robots. )***
load time-inf .
load pathfinder .
load message .
load map .
load growing-loc .
load collectionPoint .
load dock .
load human .
load obstacle .

omod ROBOT is 
    protecting MESSAGE .
    protecting OBSTACLE .
    protecting MAP .
    protecting HUMAN .
    protecting TIME-INF .
    protecting GROWING-LOC .
    protecting CPOINT .
    protecting DOCK .
    protecting PATHFINDER .

    sort CargoLevel .
    sorts WorkerCargo TransporterCargo Cargo .
    sort MovementType . 
    ***Type of object detected and Identificator.
    sort Representation .
    sort ObjectType .
    
    sort Information .
    subsorts Location Direction < Information .

    class Robot | detectionRange : Nat, cargoLevel : CargoLevel, curCargo : Cargo, detected : Representation, waitTimer : Rat, obstructionPoints : List-Location .
    class Worker | movementType : MovementType .
    class Transporter .
    
    subclass Worker Transporter < Robot < Entity .
    op _;_ : Information Information -> Information [ctor assoc comm id: noInfo] .
    op noInfo : -> Information [ctor] .
    op detectedSpeed : Rat -> Information [ctor] .

    ***Workers can plant fields or greenhouses, so they should have seeds as part of cargo.
    sort Seed .
    subsort Seed Water Fertilizer < WorkerCargo .
    subsort Produce < TransporterCargo .
    subsort TransporterCargo WorkerCargo < Cargo .
    subsort Empty Full < CargoLevel .

    ops flying ground : -> MovementType [ctor] .
    ops saladSeed potatoSeed turnipSeed pepperSeed tomatoSeed cucumberSeed wheatSeed ryeSeed peachSeed : -> Seed [ctor] .
    op distance : Object Object -> Rat [comm] .
    op processing : Representation Time -> Representation [frozen (1) right id: 0] .
    ***Robot does dijkstraSearch from the first intersection to the second.
    ***Used for shorthand to perform dijkstra on an updated map.

    op updatePath : Object Configuration Location Location -> Object .
    ***returns the front-facing location where the robots detection border is.
    op detectionBorder : Object -> Location .
    op updatePath : Object Configuration Location -> Object .
    op replanPath : Object Object List-Location -> Object .

    ops obstacle robot human : -> ObjectType [ctor] .
    op nil : -> Representation [ctor] .
    op __ : Representation Representation -> Representation [assoc comm id: nil ctor] .
    ***Todo: refine this based on what information the robot should know.
    op {_:_|_} : Oid Cid Information -> Representation .
    ***Checks if an object already is in the representation .
    op _notIn_ : String Representation -> Bool .
    ***checks if the given represenation is incompatible with path. If continuing the path would lead to a head-on collision.
    ops breaksPath $breaksPath : List-Location Representation -> Bool .

    var CONF : Configuration .
    vars S S' S2 S2' S3 S4 : String .

    vars X Y : Rat .
    vars X2 Y2 : Rat .
    vars X3 Y3 : Rat .

    var N : Nat .
    var A : Area .
    vars LL LL2 : List-Location .
    var C : Content .
    var TC : TransporterCargo .
    var STOR : Storage .
    var R : Representation .
    var PS : PathSet .
    var MC : MsgContent .
    var CID : Cid .
    var I : Information .
    vars D D2 : Direction .
    vars SP SP2 : Rat .
    var STATE : State .

    eq updatePath(< S : Robot | location : (X,Y) >, < S2 : Map | allIntersections : < S3 : Intersection | location : (X,Y) > < S4 : Intersection | location : (X2 ,Y2) > CONF >, (X2,Y2)) = 
        < S : Robot | remainingPath : (X,Y) dijkstraSearch(< S3 : Intersection | location : (X,Y) > < S4 : Intersection | location : (X2 ,Y2) > CONF, < S3 : Intersection | >, < S4 : Intersection | location : (X2,Y2) >)> .
        
    eq replanPath(< S : Robot | location : (X,Y), remainingPath : LL (X2,Y2) >, < S2 : Map | allIntersections : CONF, paths : PS >, LL2) =
        ***check if robot is at intersection, can dijkstra from there.
        if returnByLocation(CONF, (X,Y)) =/= none then
            ***remove the connection between the intersections where the obstacles are located at.
            ***Do dijkstraSearch on current location and goal from updated map.
            updatePath(< S : Robot | state : moving >, removeConnection(findPath(LL2, PS), < S2 : Map | >), (X2,Y2))
        else
            updatePath(< S : Robot | state : moving >, removeConnection(findPath(LL2, getPathSet(newIntersection((X,Y), < S2 : Map | >))), newIntersection((X,Y), < S2 : Map | >)), (X2,Y2))
        fi .

    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : north >) = (X, Y + N) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : east >) = (X + N, Y) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : south >) = (X, Y - N) .
    eq detectionBorder(< S : Robot | location : (X,Y), detectionRange : N, direction : north >) = (X - N, Y) .

    eq S notIn {S : CID | (X,Y) ; I} R = false .
    eq S notIn R = true [owise] .

    ceq $breaksPath((X,Y) (X,Y2), {S2 : CID | (X,Y3) ; north ; I}) = true if Y > Y2 .
    ceq $breaksPath((X,Y) (X2,Y), {S2 : CID | (X3,Y) ; east ; I}) = true if X > X2 .
    ceq $breaksPath((X,Y) (X,Y2), {S2 : CID | (X,Y3) ; south ; I}) = true if Y < Y2 .
    ceq $breaksPath((X,Y) (X2,Y), {S2 : CID | (X3,Y) ; west ; I}) = true if X < X2 .
    eq $breaksPath(LL, R) = false [owise] .
    ceq breaksPath(LL, {S2 : CID | (X,Y) ; I}) = false if between((X,Y), LL) == nil .
    eq breaksPath(LL, {S2 : Obstacle | (X,Y) ; I}) =
        if between((X,Y), LL) == nil then
            false
        else
            true
        fi .
    eq breaksPath(LL, {S2 : CID | (X,Y) ; D ; I}) = $breaksPath(between((X,Y), LL), {S2 : CID | (X,Y) ; D ; I}) [owise] .

    ***Path replanning happens when a robot has finished processing 
    rl [replanPath] :
        < S : Robot | state : replanning, obstructionPoints : LL >
        < S2 : Map | >
        =>
        replanPath(< S : Robot | >, < S2 : Map | >, LL)
        < S2 : Map | > .

    crl [dismissDetection] :
        < S : Robot | state : STATE, detected : R >
        =>
        < S : Robot | detected : nil >
        if ((STATE == idle) or (STATE == waiting)) and (R =/= nil) .

    ***When approaching a slower entity, brake to match speed.
    crl [approachSameDirectionEntity] : 
        < S : Robot | location : (X,Y), speed : SP, direction : D, detected : {S2 : HumanVehicle | (X2,Y2) ; D ; detectedSpeed(SP2) ; I} R >
        =>
        if < S : Robot | > directlyApproaching (X2,Y2) then
            if (distance((X,Y), (X2,Y2)) / SP) < 5 then
                < S : Robot | speed : 0, state : idle, detected : R > 
            else
                if SP2 < SP then
                    < S : Robot | speed : SP2, detected : R >
                else
                    < S : Robot | detected : R >
                fi
            fi
        else
            < S : Robot | detected : R >
        fi
        if SP > 0 .

    ***if the detected obstacle is in the way then the robot will have to replan its path.
    ***If the robot no longer has a path to its goal, it will cancel the current task and work on removing the obstacle.
    crl [detectedObstacle] : 
        < S : Robot | location : (X,Y), remainingPath : LL (X2,Y2), state : STATE, detected : {S2 : Obstacle | (X3,Y3) ; I} R, obstructionPoints : LL2 > 
        < S3 : Map | >
        =>
        ***if the obstacle is in the robot's way, add it to obstructionPoints and prepare to replan path.
        if between((X3,Y3), (X,Y) LL (X2,Y2)) =/= nil then
            < S : Robot | state : replanning, detected : R, obstructionPoints : (X3,Y3) LL2 >
            < S3 : Map | > 
            (msg obstacleAt (X3,Y3) from S to worker)
        else
            < S : Robot | detected : R >
            < S3 : Map | > 
            (msg obstacleAt (X3,Y3) from S to worker)
        fi
        if (STATE == moving) or (STATE == replanning) .

    ***Robot - Human interaction rules.
    crl [detectHumanPerson] :
        < S : Robot | location : (X,Y), speed : SP, direction : D, state : STATE, detected : {S2 : Human | (X2,Y2) ; detectedSpeed(SP2) ; I} >
        =>
        if < S : Robot | > directlyApproaching (X2,Y2) then
            ***if too close then start braking
            if (distance((X,Y), (X2,Y2)) / SP) < 3 then
                < S : Robot | speed : 0 >
            else
                < S : Robot | speed : 5 >
            fi
        else
            ***If the human is close but not in front of the robot slow down to limit possible accidents.
            < S : Robot | speed : 5 >
        fi
        if (STATE == moving) or (STATE == replanning) .

    ***In contrast to detection of person, if a human operated vehicle is on the planned path, replan path.
    crl [detectHumanVehicle] : 
        < S : Robot | location : (X,Y), remainingPath : LL, speed : SP, state : STATE, detected : {S2 : HumanVehicle | (X2,Y2) ; D ; I} R, obstructionPoints : LL2 >
        < S3 : Map | >
        =>
        if breaksPath((X,Y) LL, {S2 : HumanVehicle | (X2,Y2) ; D ; I}) then
            < S : Robot | state : replanning, detected : R, obstructionPoints : LL2 >
            < S3 : Map | >
        else
            < S : Robot | detected : R >
            < S3 : Map | >
        fi
        if (STATE == moving) or (STATE == replanning) .

    ***When a robot detects another on its path on an immediate collision course, if they are too close then it will immediately try to stop to limit the potential damage.
    ***If they are further away, then start communication to check which one will replan path.
    crl [detectIncomingRobot] :
        < S : Robot | location : (X,Y), speed : SP, direction : D, state : moving, detected : {S' : Robot | (X2,Y2) ; D2 ; I} R >
        =>
        ***Collision prevention with braking
        if (distance((X,Y), (X2,Y2)) / SP) > 3 then
            < S : Robot | speed : 0, state : waiting, detected : R, waitTimer : 10 >
        else
            < S : Robot | speed : 5, detected : R >
        fi
        if opposite(D,D2) .
        
    ***When first detecting a robot request its path and transmit own path to check for collision.
    rl [detectRobot] :
        < S : Robot | location : (X,Y), remainingPath : LL, detected : {S2 : Robot | (X2,Y2)} R >
        =>
        (msg requestPath path((X,Y) LL) from S to S2)
        < S : Robot | > .

    rl [detectedHuman] :
        < S : Robot | detected : {S' : Human | (X,Y)} R >
        =>
        < S : Robot | > .

    rl [rcvWaterMessage] :
        < S : Worker | location : (X , Y), remainingPath : nil, cargoLevel : full, curCargo : water, state : idle > < S' : Map | allIntersections : CONF > 
        (msg water S2 from S2 to worker)
        =>
        < S : Worker | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), state : moving > 
        < S' : Map | > .
    rl [rcvFertilizerMessage] :
        < S : Worker | location : (X,Y), remainingPath : nil, cargoLevel : full, curCargo : fertilizer, state : idle > < S' : Map | allIntersections : CONF >
        (msg fertilize S2 from S2 to worker)
        =>
        < S : Worker | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), state : moving >
        < S' : Map | > .
    rl [rcvHarvestMessage] :
        < S : Transporter | location : (X,Y), remainingPath : nil, cargoLevel : empty, state : idle > < S' : Map | allIntersections : CONF >
        (msg harvest S2 from S2 to worker)
        =>
        < S : Transporter | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), state : moving >
        < S' : Map | > .
    ***Rules for when robot has arrived at growing-loc and starts a task.
    rl [startWatering] :
        < S : Worker | location : (X,Y), remainingPath : nil, state : idle, cargoLevel : full, curCargo : water > 
        < S2 : Growing-loc | location : (X,Y), waterLevel : low, growingArea : A >
        =>
        < S : Worker | remainingPath : coverArea((X,Y), A), state : watering, speed : 1 > 
        < S2 : Growing-loc | > .
    rl [startFertilizing] :
        < S : Worker | location : (X,Y), remainingPath : nil, state : idle, cargoLevel : full, curCargo : fertilizer >
        < S2 : Growing-loc | location : (X,Y), fertilizerLevel : low, growingArea : A >
        =>
        < S : Worker | remainingPath : coverArea((X,Y), A), state : fertilizing, speed : 1 >
        < S2 : Growing-loc | > .
    rl [startHarvesting] :
        < S : Transporter | location : (X,Y), remainingPath : nil, state : idle, cargoLevel : empty >
        < S2 : Growing-loc | location : (X,Y), growingState : harvest, growingArea : A > 
        =>
        < S : Transporter | remainingPath : coverArea((X,Y), A), state : harvesting, speed : 1 >
        < S2 : Growing-loc | > .
    ***Transporter behavior at collection point.
    rl [startUnloading] :
        < S : Transporter | location : (X,Y), remainingPath : (X,Y), state : transporting, cargoLevel : full >
        < S2 : CPoint | location : (X,Y) >
        =>
        < S : Transporter | remainingPath : nil, state : unloading > 
        < S2 : CPoint | > .

***(
    ***Rules for when a robot finishes a task
    rl [finishWatering] :
        < S : Worker | location : (X,Y), remainingPath : (X,Y), state : watering >
        < S2 : Growing-loc | location : (X,Y), waterLevel : low >
        =>
        < S : Worker | state : idle, cargoLevel : empty >
        < S2 : Growing-loc | waterLevel : good, waterTimer : 100 > .
    rl [finishFertilizing] :
        < S : Worker | location : (X,Y), remainingPath : (X,Y), state : fertilizing >
        < S2 : Growing-loc | location : (X,Y), fertilizerLevel : low >
        =>
        < S : Worker | state : idle, cargoLevel : empty >
        < S2 : Growing-loc | fertilizerLevel : good, fertilizerTimer : 100 > .
    rl [finishHarvesting] :
        < S : Transporter | location : (X,Y), remainingPath : (X,Y), state : harvesting >
        < S' : Growing-loc | location : (X,Y), growingState : harvest, content : C >  
        < S2 : CPoint | >
        < S2' : Map | allIntersections : CONF >
        =>
        < S : Transporter | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), speed : 1,  cargoLevel : full, state : transporting >
        < S' : Growing-loc | growingState : empty >
        < S2 : CPoint | >
        < S2' : Map | > .
    rl [finishUnloading] :
        < S : Transporter | location : (X,Y), remainingPath : nil, state : unloading, curCargo : TC, cargoLevel : full >
        < S2 : CPoint | location : (X,Y), storage : STOR >
        =>
        < S : Transporter | state : idle, cargoLevel : empty >
        < S2 : CPoint | storage : addToStorage(TC, STOR) > .
)***
endom