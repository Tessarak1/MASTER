***(Superclass for ht-robot and worker-robot classes. Contains the common operations
attributes and rules between the two types of robots. )***
load time-inf .
load pathfinder .
load message .
load map .
load growing-loc .
load collectionPoint .
load dock .
load human .
load obstacle .

omod ROBOT is 
    protecting MESSAGE .
    protecting OBSTACLE .
    protecting MAP .
    protecting HUMAN .
    protecting TIME-INF .
    protecting GROWING-LOC .
    protecting CPOINT .
    protecting DOCK .
    protecting PATHFINDER .

    sort CargoLevel .
    sorts WorkerCargo TransporterCargo Cargo .
    sort MovementType . 
    ***Type of object detected and Identificator.
    sort Representation .
    sort ObjectType .
    
    ***Workers can plant fields or greenhouses, so they should have seeds as part of cargo.
    sort Seed .
    subsort Seed Water Fertilizer < WorkerCargo .
    subsort Produce < TransporterCargo .
    subsort TransporterCargo WorkerCargo < Cargo .
    subsort Empty Full < CargoLevel .

    ops flying ground : -> MovementType [ctor] .
    ops saladSeed potatoSeed turnipSeed pepperSeed tomatoSeed cucumberSeed wheatSeed ryeSeed peachSeed : -> Seed [ctor] .
    op distance : Object Object -> Rat [comm] .
    op processing : Representation Time -> Representation [frozen (1) right id: 0] .
    ***Robot does dijkstraSearch from the first intersection to the second.
    ***Used for shorthand to perform dijkstra on an updated map.
    op updatePath : Object Configuration Location -> Object .

    ops obstacle robot human : -> ObjectType [ctor] .
    op nil : -> Representation [ctor] .
    op __ : Representation Representation -> Representation [assoc comm id: nil ctor] .
    ***Todo: refine this based on what information the robot should know.
    op {_:_|_} : Oid Cid Location -> Representation .
    ***Checks if an object already is in the representation .
    op _notIn_ : String Representation -> Bool .
    ***Returns the timeInterval the robot will be at a given location.
    op eta : Location List-Location Nat -> Rat .

    class Robot | detectionRange : Nat, cargoLevel : CargoLevel, curCargo : Cargo, detected : Representation .
    class Worker | movementType : MovementType .
    class Transporter .
    subclass Worker Transporter < Robot < Entity .

    var CONF : Configuration .
    vars S S' S2 S2' : String .
    vars X Y : Int .
    vars X2 Y2 : Int .
    vars X3 Y3 : Int .
    vars X4 Y4 : Int .
    var N : Nat .
    var A : Area .
    var LL : List-Location .
    var C : Content .
    var TC : TransporterCargo .
    var STOR : Storage .
    var R : Representation .
    var PS : PathSet .
    var MC : MsgContent .
    var CID : Cid .

    eq updatePath(< S : Robot | location : (X,Y) >, CONF, (X3,Y3)) = < S : Robot | remainingPath : (X,Y) dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByLocation(CONF, (X3,Y3))) > .

    eq S notIn {S : CID | (X,Y)} R = false .
    eq S notIn R = true [owise] .

    eq eta((X,Y), (X,Y) LL, N) = 0 .
    eq eta((X,Y), (X2,Y2) (X3,Y3) LL, N) = eta((X,Y), (X3,Y3) LL, N) + (distance((X2,Y2), (X3,Y3)) / N) .

    ***Robot communicates paths to one another, if they use the same path segment at the same time
    ***one of them will have to replan path. Both calculate an alternate path and the one with the shortest replans.
  ***(  rl [receivePath] :
        < S : Robot | >
        (msg requestPath path(LL2) from S2 to S)
        =>
        < S : Robot | >
  )***
        
    ***When first detecting a robot request its path and transmit own path to check for collision.
    rl [detectRobot] :
        < S : Robot | location : (X,Y), remainingPath : LL, detected : {S2 : Robot | (X2,Y2)} R >
        =>
        (msg requestPath path((X,Y) LL) from S to S2)
        < S : Robot | > .

    ***if the detected obstacle is in the way then the robot will have to replan its path.
    ***If the robot no longer has a path to its goal, it will cancel the current task and work on removing the obstacle.
    ***if the obstacle is not in the way 
    rl [detectedObstacle] : 
        < S : Robot | location : (X,Y), remainingPath : LL (X2, Y2), detected : {S' : Obstacle | (X3,Y3)} R > < S2 : Map | allIntersections : CONF, paths : PS >
        =>
        if between((X3,Y3), (X,Y) LL (X2,Y2)) =/= nil then
            ***check if robot is at intersection, can dijkstra from there.
            if returnByLocation(CONF, (X,Y)) =/= none then
                ***remove the connection between the intersections where the obstacle is located at.
                ***Do dijkstraSearch on current location and goal from updated map.
                updatePath(< S : Robot | detected : R >, removeConnection(between((X3,Y3), (X,Y) LL (X2,Y2)), CONF), (X2,Y2))
                < S2 : Map | > 
                (msg obstacleAt (X3,Y3) from S to worker)
            else
                ***If you are not at an intersection "create" an intersection where the robot is, add it to the map, check if the obstacle is and do dijkstra.
                updatePath(< S : Robot | detected : R >, removeConnection(between((X3,Y3), (X,Y) LL (X2,Y2)), newIntersection((X,Y), < S2 : Map | >)), (X2, Y2))
                ***updatePath(< S : Robot | detected : R >,
                < S2 : Map | > 
                (msg obstacleAt (X3,Y3) from S to worker)
            fi
        else
            ***If the detected obstacle is not in the way proceed as usual after informing other workers.
            < S : Robot | detected : R >
            < S2 : Map | > 
            (msg obstacleAt (X3,Y3) from S to worker)
        fi .

    rl [detectedHuman] :
        < S : Robot | detected : {S' : Human | (X,Y)} R >
        =>
        < S : Robot | > .

    rl [rcvWaterMessage] :
        < S : Worker | location : (X , Y), remainingPath : nil, cargoLevel : full, curCargo : water, state : idle > < S' : Map | allIntersections : CONF > 
        (msg water S2 from S2 to worker)
        =>
        < S : Worker | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), state : moving > 
        < S' : Map | > .
    rl [rcvFertilizerMessage] :
        < S : Worker | location : (X,Y), remainingPath : nil, cargoLevel : full, curCargo : fertilizer, state : idle > < S' : Map | allIntersections : CONF >
        (msg fertilize S2 from S2 to worker)
        =>
        < S : Worker | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), state : moving >
        < S' : Map | > .
    rl [rcvHarvestMessage] :
        < S : Transporter | location : (X,Y), remainingPath : nil, cargoLevel : empty, state : idle > < S' : Map | allIntersections : CONF >
        (msg harvest S2 from S2 to worker)
        =>
        < S : Transporter | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), state : moving >
        < S' : Map | > .
    ***Rules for when robot has arrived at growing-loc and starts a task.
    rl [startWatering] :
        < S : Worker | location : (X,Y), remainingPath : nil, state : idle, cargoLevel : full, curCargo : water > 
        < S2 : Growing-loc | location : (X,Y), waterLevel : low, growingArea : A >
        =>
        < S : Worker | remainingPath : coverArea((X,Y), A), state : watering, speed : 1 > 
        < S2 : Growing-loc | > .
    rl [startFertilizing] :
        < S : Worker | location : (X,Y), remainingPath : nil, state : idle, cargoLevel : full, curCargo : fertilizer >
        < S2 : Growing-loc | location : (X,Y), fertilizerLevel : low, growingArea : A >
        =>
        < S : Worker | remainingPath : coverArea((X,Y), A), state : fertilizing, speed : 1 >
        < S2 : Growing-loc | > .
    rl [startHarvesting] :
        < S : Transporter | location : (X,Y), remainingPath : nil, state : idle, cargoLevel : empty >
        < S2 : Growing-loc | location : (X,Y), growingState : harvest, growingArea : A > 
        =>
        < S : Transporter | remainingPath : coverArea((X,Y), A), state : harvesting, speed : 1 >
        < S2 : Growing-loc | > .
    ***Transporter behavior at collection point.
    rl [startUnloading] :
        < S : Transporter | location : (X,Y), remainingPath : (X,Y), state : transporting, cargoLevel : full >
        < S2 : CPoint | location : (X,Y) >
        =>
        < S : Transporter | remainingPath : nil, state : unloading > 
        < S2 : CPoint | > .
    ***Rules for when a robot finishes a task
    rl [finishWatering] :
        < S : Worker | location : (X,Y), remainingPath : (X,Y), state : watering >
        < S2 : Growing-loc | location : (X,Y), waterLevel : low >
        =>
        < S : Worker | state : idle, cargoLevel : empty >
        < S2 : Growing-loc | waterLevel : good, waterTimer : 100 > .
    rl [finishFertilizing] :
        < S : Worker | location : (X,Y), remainingPath : (X,Y), state : fertilizing >
        < S2 : Growing-loc | location : (X,Y), fertilizerLevel : low >
        =>
        < S : Worker | state : idle, cargoLevel : empty >
        < S2 : Growing-loc | fertilizerLevel : good, fertilizerTimer : 100 > .
    rl [finishHarvesting] :
        < S : Transporter | location : (X,Y), remainingPath : (X,Y), state : harvesting >
        < S' : Growing-loc | location : (X,Y), growingState : harvest, content : C >  
        < S2 : CPoint | >
        < S2' : Map | allIntersections : CONF >
        =>
        < S : Transporter | remainingPath : dijkstraSearch(CONF, returnByLocation(CONF, (X,Y)), returnByName(CONF, S2)), speed : 1,  cargoLevel : full, state : transporting >
        < S' : Growing-loc | growingState : empty >
        < S2 : CPoint | >
        < S2' : Map | > .
    rl [finishUnloading] :
        < S : Transporter | location : (X,Y), remainingPath : nil, state : unloading, curCargo : TC, cargoLevel : full >
        < S2 : CPoint | location : (X,Y), storage : STOR >
        =>
        < S : Transporter | state : idle, cargoLevel : empty >
        < S2 : CPoint | storage : addToStorage(TC, STOR) > .
endom