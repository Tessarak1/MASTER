load time-inf .
load pathfinder .
load message .
load map .
load field .
load obstacle .
load sites .
load auctioneer .
load fail .
load entity
omod ROBOT is 
    protecting AUCTIONEER .
    protecting FAIL .
    protecting MESSAGE .
    protecting OBSTACLE .
    protecting MAP .
    protecting TIME-INF .
    protecting FIELD .
    protecting PATHFINDER .
    protecting SITES .
    protecting ENTITY .

    sort CargoLevel .
    sorts WorkerCargo TransporterCargo Cargo .
    sorts Seed Water Fertilizer Produce .
    sort Representation .
    sort TaskStatus . 
    sorts WorkState ActiveWork TimedWork .
    sort Information .

    subsorts Location Direction State < Information .
    subsort Tid < TaskStatus .
    subsorts ActiveWork TimedWork < WorkState .
    subsort Seed Water Fertilizer < WorkerCargo .
    subsort Produce < TransporterCargo .
    subsort TransporterCargo WorkerCargo < Cargo .

    class Robot | detectionRange : Rat, cargoLevel : CargoLevel, curCargo : Cargo,
        detected : Representation, obstructionPoints : List-Location,
        curTask : TaskStatus, workState : WorkState, handledTime : Bool .
    class Worker .
    class Transporter .
    
    subclass Worker Transporter < Robot < Entity Auctioneer .

    op water : -> Water [ctor] .
    op fertilizer : -> Fertilizer [ctor] .
    op seed : -> Seed [ctor] .

    op $startNegotiation : Object Object Object -> Bool .
    op startNegotiation : Object Object Object -> Configuration .
    op remove : Oid Configuration -> Configuration .
    op _;_ : Information Information -> Information [ctor assoc comm id: noInfo] .
    op noInfo : -> Information [ctor] .
    op TaskNr:_ : Nat -> Information [ctor] .
    op detectedSpeed : Rat -> Information [ctor] .
    op [W:_ F:_ H:_] : Level Level GrowingState -> Information [ctor] .
    op noTask : -> TaskStatus .

    ops noWork : -> WorkState [ctor] .
    op [__] : Oid TaskType -> ActiveWork [ctor] .
    op [___] : Oid TaskType Time -> TimedWork [ctor] .
    ops empty full : -> CargoLevel [ctor] .
    op seed : -> Seed [ctor] .
    op detectionBorder : Object -> Location .
    op replanPath : Object Object Location -> Object .

    op nil : -> Representation [ctor] .
    op __ : Representation Representation -> Representation [assoc comm id: nil ctor] .
    op {_:_|_} : Oid Cid Information -> Representation .
    op _notIn_ : String Representation -> Bool .
    op getLocation : Object -> Location .
    ops breaksPath $breaksPath : List-Location Representation -> Bool .
    op canCompleteNow : Object TidSet -> Bool .
    op $parseTasksGL : Representation -> TidSet .
    op parseTasksGL : Representation -> TidSet .
    op assignTask : Object Tid -> Object .
    op calculatePathLength : Object Tid Object -> Rat .
    op prepareAuction : Object TidSet -> Configuration .
    op auctionTimer : -> Timer .
    ops rejectTask rejectMsg : Object -> Bool .
    op startWorkGL : Object -> Object .

    ops SAFE-SPEED MAX-SPEED : -> Rat .
    ops SAFE-TIME EMERGENCY-TIME REMOVAL-TIME REPAIR-TIME : -> Time .
    ops WORK-RANGE FINAL-RANGE : -> Rat .
    op ROBOT-SIZE : -> Rat .

    ops needsResupply needsCPoint : Object Tid -> Bool .
    ops resupplyLocCheck cPointLocCheck : Object Tid Location -> List-Location .
    op performChecks : Object Tid Configuration -> List-Location .
    op $planPathLocations : Object Tid Configuration -> List-Location .
    op $planPath : Object List-Location List-Location -> List-Location .
    op planPath : Object Tid Configuration -> List-Location .

    op $timeCheck : Object Time -> Object .
    op $locationChange : Object Location -> Object .
    ops $locationPrevention $speedPrevention : Object Representation -> Object .
    op crashPrevention : Object Representation -> Object .
    op sameDestination : Location Configuration -> Configuration .
    op closest : Location Configuration Configuration -> Configuration .

    op $yieldLocationHelper : Location PathSet -> Location .
    op yieldLocation : Object PathSet List-Location -> List-Location .
    op yieldIntersection : PQueue Object List-Location -> Configuration .
    op $yieldPath : Location Object List-Location -> List-Location .
    op yieldPath : Object Object List-Location -> List-Location .

    vars CONF CONF2 : Configuration .
    vars OID OID2 OID3 OID4 : Oid .
    vars X Y X2 Y2 X3 Y3 : Rat .
    var RI : RatInf .
    vars N N2 : Nat .
    var A : Area .
    vars LL LL2 LL3 : List-Location .
    vars L L2 : Level .
    var GS : GrowingState .
    var TC : TransporterCargo .
    var PS : PathSet .
    var MC : MsgContent .
    var CID : Cid .
    var I : Information .
    vars D D2 : Direction .
    vars SP SP2 : Rat .
    var STATE : State .
    var REP : Representation .
    vars OS OS2 : OidSet .
    var T : Timer .
    vars TIME TIME2 : Time .
    vars TID TID2 : Tid .
    var TIDS : TidSet .
    vars AS AS2 : AttributeSet .
    var CL : CargoLevel .
    var FUNC : FunctioningState .
    var INC : IncapacitatedState .
    var PQ : PQueue .
    var O : Object . 

    vars TT TT2 : TaskType .
    var TS : TaskStatus .
    var TPT : TransporterTask .
    var WT : WorkerTask .
    var AW : ActiveWork .
    vars WS WS2 : WorkState .
    var TW : TimedWork .
    var AU : Auction .
    var B : Bid .

    eq remove(OID, < OID : Robot | > CONF) = CONF .
    eq remove(OID, CONF) = CONF [owise] .

    eq WORK-RANGE = 1 .
    eq REMOVAL-TIME = 5 .
    eq REPAIR-TIME = 5 .
    eq SAFE-SPEED = 1 .
    eq MAX-SPEED = 5 .
    eq SAFE-TIME = 5 .
    eq EMERGENCY-TIME = 3 .
    eq ROBOT-SIZE = 1 .

    ceq $startNegotiation(< OID : Robot | location : (X,Y), direction : D, state : moving >,
        < OID2 : Robot | location : (X2,Y2),  state : moving, direction : D2 >, < OID3 : Map | paths : PS >) =
            true if (findPath((X,Y), PS) == findPath((X2,Y2), PS)) and opposite(D,D2) .
    ceq $startNegotiation(< OID : Robot | location : (X,Y), direction : D, remainingPath : LL, state : moving >,
        < OID2 : Robot | location : (X2,Y2), state : STATE >, < OID3 : Map | >) =
            true if (STATE =/= moving) and (findPath((X,Y), PS) == findPath((X2,Y2), PS)) and (between((X,Y) LL, (X2,Y2)) =/= nil) .

    eq $startNegotiation(< OID : Robot | >, < OID2 : Robot | >, < OID3 : Map | >) = false [owise] .
    eq startNegotiation(< OID : Robot | curTask : noTask >, < OID2 : Robot | >, < OID3 : Map | >) = none .
    eq startNegotiation(< OID : Robot | location : (X,Y), remainingPath : LL >, < OID2 : Robot | >, < OID3 : Map | >) =
        if $startNegotiation(< OID : Robot | remainingPath : LL >, < OID2 : Robot | >, < OID3 : Map | >)
        then
            dly(msg requestPath ยง path((X,Y) LL) from OID to OID2, MSG-DELAY)
        else
            none
        fi .
    eq closest((X,Y), CONF, none) = CONF .
    eq closest((X,Y), < OID : Robot | location : (X2,Y2), direction : D > CONF, < OID2 : Robot | location : (X3,Y3), direction : D > CONF2) =
        if distance((X,Y), (X2,Y2)) < distance((X,Y), (X3,Y3))
        then
            closest((X,Y), < OID : Robot | > CONF, CONF2)
        else
            closest((X,Y), < OID2 : Robot | > CONF, CONF2)
        fi .
    eq closest((X,Y), CONF, < OID : Robot | > CONF2) = closest((X,Y), < OID : Robot | > CONF, CONF2) .
    eq sameDestination((X,Y), < OID : Robot | remainingPath : (X,Y) LL > CONF) = < OID : Robot | > sameDestination((X,Y), CONF) .
    eq sameDestination((X,Y), CONF) = none [owise] .
    eq $locationChange(< OID : Robot | location : (X,Y) >, (X,Y2)) =
        if Y > Y2
        then
            < OID : Robot | remainingPath : (X,Y) (X,Y2 + ROBOT-SIZE) >
        else
            < OID : Robot | remainingPath : (X,Y) (X,Y2 - ROBOT-SIZE) >
        fi .
    eq $locationChange(< OID : Robot | location : (X,Y) >, (X2,Y)) =
        if X > X2
        then
            < OID : Robot | remainingPath : (X,Y) (X2 + ROBOT-SIZE,Y) >
        else
            < OID : Robot | remainingPath : (X,Y) (X2 - ROBOT-SIZE,Y) >
        fi .
    eq getLocation(< OID : Robot | location : (X,Y) >) = (X,Y) .
    eq decreaseTimers(< OID : Robot | state : removing, workState : [OID2 (removeAt (X,Y)) TIME] >, TIME2) = < OID : Robot | workState : [OID2 (removeAt (X,Y)) (TIME monus TIME2)] > .
    eq decreaseTimers(< OID : Robot | state : repairing, workState : [OID2 (repairAt (X,Y)) TIME] >, TIME2) = < OID : Robot | workState : [OID2 (repairAt (X,Y)) (TIME monus TIME2)] > .
    eq decreaseTimers(< OID : Robot | >, TIME) = < OID : Robot | > [owise] .
    eq rejectTask(< OID : Robot | state : STATE, curTask : TS >) = rejectMsg(< OID : Robot | >) or (TS =/= noTask) .
    eq rejectMsg(< OID : Robot | state : INC >) = true .
    eq rejectMsg(< OID : Robot | >) = false [owise] .
    eq needsCPoint(< OID : Worker | >, TID) = false .
    eq needsCPoint(< OID : Transporter | cargoLevel : CL >, TID) = CL == full .
    eq needsResupply(< OID : Worker | curCargo : fertilizer >, [OID2, watering, N]) = true .
    eq needsResupply(< OID : Worker | curCargo : water >, [OID2, fertilize, N]) = true .
    eq needsResupply(< OID : Worker | cargoLevel : empty >, TID) = true .
    eq needsResupply(< OID : Robot | >, TID) = false [owise] .
    eq cPointLocCheck(< OID : Robot | >, TID, (X,Y)) = if needsCPoint(< OID : Robot | >, TID) then (X,Y) else nil fi .
    eq resupplyLocCheck(< OID : Robot | >, TID, (X,Y)) = if needsResupply(< OID : Robot | >, TID) then (X,Y) else nil fi .
    eq performChecks(< OID : Robot | >, TID, < OID2 : ResupplySite | location : (X,Y) > < OID3 : CollectionSite | location : (X2,Y2) > CONF) =
        resupplyLocCheck(< OID : Robot | >, TID, (X,Y)) cPointLocCheck(< OID : Robot | >, TID, (X2,Y2)) .
    eq canCompleteNow(< OID : Worker | state : FUNC >, [OID2, removeAt (X,Y), N]) = true .
    eq canCompleteNow(< OID : Worker | state : FUNC >, [OID2, repairAt (X,Y), N]) = true .
    eq canCompleteNow(< OID : Worker | state : FUNC, cargoLevel : full, curCargo : water >, [OID2, watering, N]) = true .
    eq canCompleteNow(< OID : Worker | state : FUNC, cargoLevel : full, curCargo : fertilizer >, [OID2, fertilize, N]) = true .
    eq canCompleteNow(< OID : Transporter | cargoLevel : empty >, [OID2, harvest, N]) = true .
    eq canCompleteNow(< OID : Robot | state : INC >, TID) = false .
    ceq canCompleteNow(< OID : Robot | curTask : TID >, TID2) = false if TID =/= noTask .
    eq canCompleteNow(< OID : Robot | >, TIDS) = false [owise] .
    eq $planPathLocations(< OID : Robot | location : (X,Y) >, [OID2, TT, N], < OID2 : Locatable | location : (X2,Y2) > CONF) =
        (X,Y) performChecks(< OID : Robot | >, [OID2, TT, N], < OID2 : Locatable | location : (X2,Y2) > CONF) (X2,Y2) .
    eq $planPath(< OID : Map | >, LL, LL2) = dijkstraChain(getIntersections(addAndRemove(< OID : Map | >, LL, LL2)), LL) .
    eq calculatePathLength(< OID : Robot | >, TID, < OID2 : Map | >) = listLength(planPath(< OID : Robot | >, TID, < OID2 : Map | >)) .
    eq planPath(< OID : Robot | location : (X,Y), obstructionPoints : LL >, [OID2, TT, N], < OID3 : Map | allIntersections : CONF > CONF2) =
        (X,Y) $planPath(< OID3 : Map | >,
            $planPathLocations(< OID : Robot | >, [OID2, TT, N], CONF CONF2), LL) .
    eq detectionBorder(< OID : Robot | location : (X,Y), detectionRange : N, direction : north >) = (X, Y + N) .
    eq detectionBorder(< OID : Robot | location : (X,Y), detectionRange : N, direction : east >) = (X + N, Y) .
    eq detectionBorder(< OID : Robot | location : (X,Y), detectionRange : N, direction : south >) = (X, Y - N) .
    eq detectionBorder(< OID : Robot | location : (X,Y), detectionRange : N, direction : north >) = (X - N, Y) .
    eq OID notIn {OID : CID | (X,Y) ; I} REP = false .
    eq OID notIn REP = true [owise] .
    ceq $breaksPath((X,Y) (X,Y2), {OID2 : CID | (X,Y3) ; north ; I}) = true if Y > Y2 .
    ceq $breaksPath((X,Y) (X2,Y), {OID2 : CID | (X3,Y) ; east ; I}) = true if X > X2 .
    ceq $breaksPath((X,Y) (X,Y2), {OID2 : CID | (X,Y3) ; south ; I}) = true if Y < Y2 .
    ceq $breaksPath((X,Y) (X2,Y), {OID2 : CID | (X3,Y) ; west ; I}) = true if X < X2 .
    eq $breaksPath(LL, REP) = false [owise] .
    ceq breaksPath(LL, {OID2 : CID | (X,Y) ; I}) = false if between((X,Y), LL) == nil .
    eq breaksPath(LL, {OID2 : Obstacle | (X,Y) ; I}) =
        if between((X,Y), LL) == nil then
            false
        else
            true
        fi .
    eq breaksPath(LL, {OID2 : CID | (X,Y) ; D ; I}) = $breaksPath(between((X,Y), LL), {OID2 : CID | (X,Y) ; D ; I}) [owise] .


    eq $yieldLocationHelper((X,Y), {(X,Y) (X,Y2)} PS) =
        if Y < Y2
        then
            (X, Y + ROBOT-SIZE)
        else
            (X, Y - ROBOT-SIZE)
        fi .
    eq $yieldLocationHelper((X,Y), {(X,Y) (X2,Y)} PS) =
        if X < X2
        then
            (X + ROBOT-SIZE, Y)
        else
            (X - ROBOT-SIZE, Y)
        fi .
    eq yieldLocation(< OID : Intersection | location : (X,Y) >, PS, LL (X,Y) LL2) =
        if findPath((X,Y), PS) \ findPath(last(LL) first(LL2), PS) =/= es
        then
            $yieldLocationHelper((X,Y), findPath((X,Y), PS) \ findPath(last(LL) first(LL2), PS))
        else
            nil
        fi .
    eq yieldIntersection(noQueue, < OID : Map | >, LL) = none .
    eq yieldIntersection([< OID : Intersection | >, 0, "Start"] PQ, < OID2 : Map | >, LL) = yieldIntersection(PQ, < OID2 : Map | >, LL) .
    ceq yieldIntersection([< OID : Intersection | location : (X,Y) >, RI, OID2] PQ, < OID3 : Map | paths : PS >, LL) =
        if RI == ratInf
        then
            none
        else
            if yieldLocation(< OID : Intersection | location : (X,Y) >, PS, LL) =/= nil
            then
                < OID : Intersection | location : (X,Y) >
            else
                yieldIntersection(PQ, < OID3 : Map | >, LL)
            fi
        fi
        if OID2 =/= "Start" .
    eq $yieldPath((X,Y), < OID : Map | allIntersections : CONF, paths : PS >, LL) =
        if yieldIntersection(updateDistances(PQConvert((X,Y), CONF)), < OID : Map | >, LL) =/= none
        then
            buildPath(
                oid(returnByLocation(CONF, (X,Y))),
                oid(yieldIntersection(updateDistances(PQConvert((X,Y), CONF)), < OID : Map | >, LL)),
                PQConvert((X,Y), CONF)
            )
            yieldLocation(
                yieldIntersection(updateDistances(PQConvert((X,Y), CONF)), < OID : Map | >, LL),
                PS,
                LL
            )
        else
            nil
        fi .
    eq yieldPath(< OID : Robot | location : (X,Y), obstructionPoints : LL >, < OID2 : Map | >, (X2,Y2) LL2) =
        $yieldPath((X,Y), addAndRemove(< OID2 : Map | >, (X,Y), (X2,Y2) LL), (X2,Y2) LL2) .
    
    eq $timeCheck(< OID : Robot | >, TIME) =
        if TIME < EMERGENCY-TIME
        then
            < OID : Robot | state : waiting, speed : 0 >
        else
            if TIME < SAFE-TIME 
            then
                < OID : Robot | speed : SAFE-SPEED >
            else
                < OID : Robot | >
            fi
        fi .
    eq $speedPrevention(< OID : Robot | >, {OID2 : Obstacle | I}) = < OID : Robot | > .
    eq $speedPrevention(< OID : Robot | location : (X,Y), direction : D, speed : SP >, {OID2 : Robot | (X2,Y2) ; D ; detectedSpeed(SP2) ; moving ; I}) =
        if SP2 >= SP
        then
            < OID : Robot | >
        else
            $timeCheck(< OID : Robot | >, distance((X,Y), (X2,Y2)) / (SP - SP2))
        fi .
    ceq $speedPrevention(< OID : Robot | location : (X,Y), direction : D, speed : SP >, {OID2 : Robot | (X2, Y2) ; D2 ; detectedSpeed(SP2) ; moving ; I}) =
        $timeCheck(< OID : Robot | >, distance((X,Y), (X2,Y2)) / (SP + SP2))
        if opposite(D, D2) .
    eq $speedPrevention(< OID : Robot | >, {OID2 : Robot | I}) = < OID : Robot | > [owise] .
    eq $locationPrevention(< OID : Robot | >, {OID2 : Robot | moving ; I}) = < OID : Robot | > .
    ceq $locationPrevention(< OID : Robot | >, {OID2 : Robot | (X2,Y2) ; STATE ; I}) = $locationChange(< OID : Robot | >, (X2,Y2)) if STATE =/= moving .
    eq $locationPrevention(< OID : Robot | location : (X,Y) >, {OID2 : Obstacle | (X2,Y2)}) = $locationChange(< OID : Robot | >, (X2,Y2)) .
    eq crashPrevention(< OID : Robot | location : (X,Y), remainingPath : LL >, {OID2 : CID | (X2,Y2) ; I}) = 
        if between((X2, Y2), (X,Y) LL) =/= nil
        then
            $speedPrevention($locationPrevention(< OID : Robot | >, {OID2 : CID | (X2,Y2) ; I}), {OID2 : CID | (X2,Y2) ; I})
        else
            < OID : Robot | >
        fi .

    rl [fail] :
        < OID : Robot | curTask : TS >
        < "FAIL" : Fail | >
        =>
        if TS == noTask
        then
            < OID : Robot | state : failed, speed : 0 >
        else
            startAuction(< OID : Robot | state : failed >, TS)
        fi .
    rl [replanPath] :
        < OID : Robot | state : planningPath, detected : nil, curTask : TID >
        < OID3 : Map | >
        =>
        < OID : Robot | state : moving, remainingPath : planPath(< OID : Robot | >, TID, < OID3 : Map | >) >
        < OID3 : Map | > .
    rl [rcvPathNegotiationBusy] :
        < OID : Robot | location : (X,Y), remainingPath : LL, curTask : TID >
        msg requestPath ยง path(LL2) from OID2 to OID
        ***both calc rechanged path and cost of going that path compared to the original, the one with lower cost changes path.
        ***They may detect each other at the same time.
        ***both sends request path and own path.
        =>
        < OID : Robot | > .
    rl [rcvPathNegotiationFree] :
        < OID : Robot | location : (X,Y), remainingPath : LL, obstructionPoints : LL2, curTask : noTask >
        < OID3 : Map | >
        msg requestPath ยง path((X2,Y2) LL3) from OID2 to OID
        =>
        if between((X,Y), (X2,Y2) LL3) =/= nil
        then
            < OID : Robot | remainingPath : (X,Y) yieldPath(< OID : Robot | >, < OID3 : Map | >, (X2,Y2) LL3), state : moving, speed : MAX-SPEED >
            < OID3 : Map | >
        else
            < OID : Robot | >
            < OID3 : Map | >
        fi .
    rl [rcvObstacleRemovedMsg] : 
        < OID : Robot | obstructionPoints : LL >
        msg removed (X,Y) from OID2 to OID
        =>
        < OID : Robot | obstructionPoints : remove(LL, (X,Y)) > .
    crl [rcvTaskMsgBusy] :
        < OID : Robot | >
        msg TID from OID2 to OID
        =>
        < OID : Robot | >
        msg busy TID from OID to OID2 
        if rejectTask(< OID : Robot  | >) .
    crl [rcvTaskMsgFree] :
        < OID : Robot | location : (X,Y), obstructionPoints : LL >
        < OID2 : Map | allIntersections : CONF >
        msg [OID3, TT, N] from OID3 to OID
        =>
        < OID : Robot | >
        < OID2 : Map | >
        (msg bid calculatePathLength(< OID : Robot | >, [OID3, TT, N], < OID2 : Map | >) on [OID3, TT, N] from OID to OID3)
        if not rejectTask(< OID : Robot | >) .
    rl [winAuction] :
        < OID : Robot | >
        msg won TID from OID2 to OID
        =>
        if rejectMsg(< OID : Robot | >)
        then
            < OID : Robot | >
            msg reject TID from OID to OID2
        else
            < OID : Robot | state : planningPath, curTask : TID >
            msg accept TID from OID to OID2 
        fi .
    crl [arriveAtFixLoc] :
        < OID : Robot | location : (X,Y), remainingPath : (X,Y), state : STATE >
        =>
        < OID : Robot | remainingPath : nil >
        if (STATE == removing) or (STATE == repairing) .
    rl [detectFunctioningRobot] :
        < OID : Robot | detected : {OID2 : Robot | FUNC ; I} REP >
        < OID2 : Robot | >
        < OID3 : Map | >
        =>
        crashPrevention(< OID : Robot | detected : REP >, {OID2 : Robot | FUNC ; I})
        startNegotiation(< OID : Robot | >, < OID2 : Robot | >, < OID3 : Map | >)
        < OID2 : Robot | >
        < OID3 : Map | > .
    rl [detectFailedRobot] :
        < OID : Robot | location : (X,Y), remainingPath : LL, detected : {OID2 : Robot | INC ; (X2,Y2) ; I} REP, obstructionPoints : LL2, workers : OS >
        < OID2 : Robot | location : (X2,Y2) >
        < OID3 : Map | >
        =>
        if canCompleteNow(< OID : Robot | >, [OID2, repairAt (X2,Y2), 1])
        then
            crashPrevention(< OID : Robot | state : moving,
                remainingPath : planPath(< OID : Robot | >, [OID2, repairAt (X2,Y2), 1], < OID3 : Map | > < OID2 : Robot | >),
                detected : REP, curTask : [OID2, repairAt (X2,Y2), 1] >, {OID2 : Robot | INC ; (X2,Y2) ; I})
            < OID2 : Robot | >
            < OID3 : Map | >
        else
            if between((X2,Y2), (X,Y) LL) =/= nil
            then
                startAuction(< OID : Robot | state : planningPath, detected : REP, obstructionPoints : (X2,Y2) LL2 >, [OID2, repairAt (X2,Y2), 1])
                < OID2 : Robot | >
                < OID3 : Map | >
            else
                startAuction(< OID : Robot | detected : REP, obstructionPoints : (X2, Y2) LL2 >, [OID2, repairAt (X2,Y2), 1])
                < OID2 : Robot | >
                < OID3 : Map | >
            fi
        fi .
    rl [detectObstacle] : 
        < OID : Robot | location : (X,Y), remainingPath : LL, detected : {OID2 : Obstacle | (X2,Y2)} REP, obstructionPoints : LL2, workers : OS, transporters : OS2 > 
        < OID2 : Obstacle | location : (X2,Y2) >
        < OID3 : Map | > 
        =>
        if canCompleteNow(< OID : Robot | >, [OID2, removeAt (X2,Y2), 1])
        then
            crashPrevention(< OID : Robot | state : moving,
                remainingPath : (X,Y) planPath(< OID : Robot | >, [OID2, removeAt (X2,Y2), 1], < OID3 : Map | > < OID2 : Obstacle | >),
                detected : REP, curTask : [OID2, removeAt (X2,Y2), 1] >, {OID2 : Obstacle | (X2,Y2)})
            broadcast(OID, obstacleAt (X2,Y2), OS OS2)
            < OID2 : Obstacle | >
            < OID3 : Map | >
        else
            if between((X2,Y2), (X,Y) LL) =/= nil
            then
                startAuction(< OID : Robot | state : planningPath, detected : REP, obstructionPoints : (X2,Y2) LL2 >, [OID2, removeAt (X2,Y2), 1])
                < OID2 : Obstacle | >
                < OID3 : Map | >
            else
                startAuction(< OID : Robot | detected : REP, obstructionPoints : (X2, Y2) LL2 >, [OID2, removeAt (X2,Y2), 1])
                < OID2 : Obstacle | >
                < OID3 : Map | >
            fi
        fi .

    crl [startObstacleRemoval] :
        < OID : Robot | location : (X,Y), curTask : [OID2, removeAt (X2,Y2), N], workState : noWork >
        < OID2 : Obstacle | location : (X2,Y2) >
        =>
        < OID : Robot | state : removing, workState : [OID2 (removeAt (X2,Y2)) REMOVAL-TIME] >
        < OID2 : Obstacle | > 
        if canCompleteNow(< OID : Robot | >, [OID2, removeAt (X2,Y2), N]) and distance((X,Y), (X2,Y2)) <= WORK-RANGE .
    crl [startRobotRepair] :
        < OID : Robot | location : (X,Y), curTask : [OID2, repairAt (X2,Y2), N], workState : noWork >
        < OID2 : Robot | location : (X2,Y2), state : failed > 
        =>
        < OID : Robot | state : repairing, workState : [OID2 (repairAt (X2,Y2)) REPAIR-TIME] >
        < OID2 : Robot | >
        if canCompleteNow(< OID : Robot | >, [OID2, removeAt (X2,Y2), N]) and distance((X,Y), (X2,Y2)) <= WORK-RANGE .
    rl [finishObstacleRemoval] :
        < OID : Robot | location : (X,Y), curTask : [OID2, removeAt (X2,Y2), N], workState : [OID2 (removeAt (X2,Y2)) 0],
            workers : OS, transporters : OS2 >
        < OID2 : Obstacle | location : (X2,Y2) >
        =>
        < OID : Robot | speed : 0, state : idle, curTask : noTask, workState : noWork >
        broadcast(OID, removed (X2,Y2), OS OS2) .
    rl [finishRobotRepair] :
        < OID : Robot | location : (X,Y), curTask : [OID2, repairAt (X2,Y2), N], workState : [OID2 (repairAt (X2,Y2)) 0] >
        < OID2 : Robot | state : failed, location : (X2,Y2) >
        =>
        < OID : Robot | speed : 0, state : idle, curTask : noTask, workState : noWork >
        < OID2 : Robot | state : idle > .
    
    ***Correct pattern or extract Sites to upper layer of configuration?
    crl [startResupply] :
        < OID : Robot | state : FUNC, location : (X,Y), curTask : TID >
        < OID2 : Map | allIntersections : < OID3 : ResupplySite | location : (X,Y), AS > CONF >
        =>
        < OID : Robot | state : resupplying > 
        < OID2 : Map | > 
        if needsResupply(< OID : Robot | >, TID) .
    rl [finishResupply] :
        < OID : Robot | location : (X,Y), state : resupplying, curTask : [OID2, TT, N] >
        < OID3 : Map | allIntersections : < OID4 : ResupplySite | location : (X,Y), AS > CONF > 
        =>
        if (TT == watering)
        then
            < OID : Robot | state : moving, curCargo : water, cargoLevel : full >
            < OID3 : Map | >
        else
            if (TT == fertilize)
            then
                < OID : Robot | state : moving, curCargo : fertilizer, cargoLevel : full >
                < OID3 : Map | >
            else
                < OID : Robot | state : moving >
                < OID3 : Map | >
            fi
        fi .
    rl [startGrowingLocTask] :
        < OID : Robot | location : (X,Y), curTask : [OID2, TT, N], remainingPath : nil, workState : noWork >
        < OID2 : Field | growingArea : A, location : (X,Y) >
        =>
        if canCompleteNow(< OID : Robot | >, [OID2, TT,N])
        then
            < OID : Robot | remainingPath : coverArea((X,Y), A), workState : [OID2 TT], speed : 1, state : moving >
            < OID2 : Field | >
        else
            < OID : Robot | state : planningPath >
            < OID2 : Field | >
        fi .
    rl [finishGrowingLocTask] :
        < OID : Robot | location : (X,Y), curTask : [OID2, TT, N], remainingPath : nil, workState : [OID2 TT] >
        < OID2 : Field | location : (X,Y) >
        =>
        < OID : Robot | cargoLevel : empty, curTask : noTask, workState : noWork >
        taskComplete(< OID2 : Field | >, [OID2, TT, N]) .  
endom

