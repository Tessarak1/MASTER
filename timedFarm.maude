load robot .
load time-inf .
load obstacle . 
load human .
load buildings .

omod TIMED-FARM is
    protecting HUMAN .
    protecting ROBOT .
    protecting TIME-INF .
    protecting MAP .
    protecting FIELD .
    protecting OBSTACLE .
    protecting BUILDINGS .

    sort ClockedConfiguration .

    op  _@_ : Configuration Time -> ClockedConfiguration [ctor] .
    op $maxTimeAdvanceRobot : Configuration -> Time .
    op maxTimeAdvance : Configuration -> Time .
    op timeEffect : Object Time -> Object .
    op calculateAdvance : Object Object -> Time .
    op collision : Configuration Object -> Configuration .
    op handleCollisions : Configuration -> Configuration .
    op updateLocation : Object -> Object .
    op detect : Configuration -> Configuration .
    op unavoidableCrash : Object Object -> Bool .
    op _detects_ : Object Object -> Bool .

    vars CONF CONF2 CONF3 : Configuration .
    var OBS : Configuration .
    vars T T2 : Time .
    var PS : PathSet .
    vars TR TR2 TR3 TR4 : Timer .
    var O : Object .
    vars S S2 S3 : String .
    vars X X2 Y Y2 X3 Y3 SP SP2 : Rat .
    vars N N' N2 N3 N4 : Nat .
    vars L L2 : Level .
    var LL : List-Location .
    vars I I2 : Int .
    vars NI NI2 : NatInf .
    vars D D2 : Direction .
    var STATE : State .
    vars R R2 : Rat .
    var GS : GrowingState .
    var REP : Representation .
    var C : Cargo .
    var FUNC : FunctioningState .
    var MSG : Msg .
    var MC : MsgContent .
    vars WS WS2 : WorkState .
    var TID : Tid .
    var TT : TaskType .

    eq < S : Robot | curTask : [S2, TT, N] > detects < S2 : Locatable | > = false .
    eq < S : Robot | location : (X,Y), detected : REP, detectionRange : N > detects < S2 : Locatable | location : (X2,Y2) > = (S2 notIn REP) and ((X2,Y2) inArea(makeArea((X,Y), N))) .
    eq < S : Robot | > detects < S2 : Locatable | > = true [owise] .

    eq updateLocation(< S : Robot | location : (X, Y), direction : north >) = < S : Robot | location : (X, Y - 1) > .
    eq updateLocation(< S : Robot | location : (X, Y), direction : east >) = < S : Robot | location : (X - 1, Y) > .
    eq updateLocation(< S : Robot | location : (X, Y), direction : south >) = < S : Robot | location : (X, Y + 1) > .
    eq updateLocation(< S : Robot | location : (X, Y), direction : west >) = < S : Robot | location : (X + 1, Y) > .

    eq collision(< S : Robot | location : (X, Y) > < S2 : Obstacle | >, < S3 : Map | >) =  updateLocation(< S : Robot | speed : 0, state : crashed >) < S2 : Obstacle | > .
    ceq collision(< S : Robot | speed : SP > < S2 : Robot | speed : SP2 >, < S3 : Map | paths : PS >) = 
        updateLocation(< S : Robot | state : crashed, speed : 0 >) < S2 : Robot | speed : 0, state : crashed >
        if outsideMap(getLocation(updateLocation(< S : Robot | >)), PS) == false .

    eq handleCollisions(< S : Robot | location : (X, Y) > < S2 : PhysicalObj | location : (X, Y) >  < S3 : Map | > CONF) = collision(< S : Robot | > < S2 : PhysicalObj | >, < S3 : Map | >) handleCollisions(CONF) .
    eq handleCollisions(CONF) = CONF [owise] .

    eq unavoidableCrash(< S : Robot | >, none) = false .
    eq unavoidableCrash(< S : Robot | speed : 0 >, O) = false .
    ***update or determine what speed unit means or distancet to update stoppingDistance.
    ceq unavoidableCrash(< S : Robot | location : (X, Y), direction : D, speed : SP >, < S2 : Robot | location : (X2, Y2), direction : D2, speed : SP2 >) = 
        if distance((X, Y), (X2, Y2)) <= stoppingDistance(< S : Robot | >) + stoppingDistance(< S2 : Robot | >) then
            true
        else
            false
        fi
    if opposite(D, D2) .
    ***add for not opposite directions, but moving towards the same point
    eq unavoidableCrash(< S : Robot | location : (X, Y) >, < S2 : PhysicalObj | location : (X2, Y2) >) = 
        if distance((X, Y), (X2, Y2)) <= stoppingDistance(< S : Robot | >) then
            true
        else
            false
        fi [owise] .

    eq calculateAdvance(< S : Robot | location : (X,Y), remainingPath : (X2,Y2), speed : SP >, none) = distance((X,Y), (X2,Y2)) / SP .
    eq calculateAdvance(< S : Robot | location : (X, Y), speed : SP, direction : D, detectionRange : N >, < S2 : Robot | location : (X2, Y2), speed : SP2, direction : D, detectionRange : N2 >) = 
        ***If two entities move in the same direction, and the one behind isn't faster then calculateAdvance is inf since they wont collide.
        if SP2 >= SP then
            inf
        else
            if unavoidableCrash(< S : Robot | >, < S2 : Robot | >) then
                distance((X, Y), (X2,Y2)) / (SP - SP2) 
            else
                ***If the entities are sufficiently far away from each other, check for detection ranges. 
                if distance((X, Y), (X2,Y2)) > max(N, N2) then
                    (distance((X, Y), (X2,Y2)) - max(N, N2)) / (SP - SP2)
                else
                    if distance((X, Y), (X2,Y2)) > min(N,N2) then
                        (distance((X, Y), (X2,Y2)) - min(N,N2)) / (SP - SP2)
                    else
                        distance((X, Y), (X2,Y2)) / (SP - SP2)
                    fi
                fi
            fi
        fi .
    ceq calculateAdvance(< S : Robot | location : (X, Y), speed : SP, direction : D, detectionRange : N >, < S2 : Robot | location : (X2,Y2), speed : SP2, direction : D2, detectionRange : N2 >) = 
        if unavoidableCrash(< S : Robot | >, < S2 : Robot | >) then
            distance((X, Y), (X2,Y2)) / (SP + SP2)
        else
            if distance((X, Y), (X2,Y2)) > max(N, N2) then
                (distance((X, Y), (X2,Y2)) - max(N, N2)) / (SP + SP2)
            else
                if distance((X, Y), (X2,Y2)) > min(N,N2) then
                    (distance((X, Y), (X2,Y2)) - min(N,N2)) / (SP + SP2)
                else
                    distance((X, Y), (X2,Y2)) / (SP + SP2) 
                fi
            fi
        fi
        if opposite(D,D2) .
    eq calculateAdvance(< S : Robot | location : (X, Y), speed : SP, detectionRange : N >, < S2 : Obstacle | location : (X2,Y2) >) = 
        if unavoidableCrash(< S : Robot | >, < S2 : Obstacle | >) then
            distance((X, Y), (X2,Y2)) / SP
        else
            if (distance((X, Y), (X2,Y2)) > N) then
                (distance((X, Y), (X2,Y2)) - N) / SP
            else
                distance((X, Y), (X2,Y2)) / SP
            fi 
        fi .

    ceq $maxTimeAdvanceRobot(< S : Robot | detected : REP > CONF) = 0 if REP =/= nil .
    eq $maxTimeAdvanceRobot(< S : Robot | location : (X,Y), remainingPath : (X,Y) LL > CONF) = 0 .
    ceq $maxTimeAdvanceRobot(< S : Robot | location : (X,Y), state : FUNC, curTask : TID > < S2 : ResupplyStation | location : (X,Y) > CONF) = 0 if needsResupply(< S : Robot | >, TID) and (FUNC =/= resupplying) .
    ceq $maxTimeAdvanceRobot(< S : Robot | state : FUNC, location : (X,Y), curTask : [S2, TT, N], workState : noWork > < S2 : Field | location : (X,Y) > CONF) = 0 if canCompleteNow(< S : Robot | >, [S2, TT, N]) .
    ceq $maxTimeAdvanceRobot(< S : Robot | state : STATE > CONF) = 0 if (STATE == replanning) or (STATE == planningPath) .
    eq $maxTimeAdvanceRobot(< S : Robot | state : crashed, detected : nil > CONF) = inf .
    eq $maxTimeAdvanceRobot(< S : Robot | state : idle, remainingPath : nil, detected : nil > CONF) = inf .
    ceq $maxTimeAdvanceRobot(< S : Robot | state : STATE, workState : [S2 TT T], detected : nil > CONF) = T if (STATE == repairing) or (STATE == removing) .
    eq $maxTimeAdvanceRobot(< S : Robot | state : moving, location : (X, Y), speed : SP, remainingPath : (X2, Y2) LL, detected : nil > CONF)
    =
    calculateAdvance(< S : Robot | >, objectInWay((X, Y), (X2,Y2), CONF)) [owise] .
    eq maxTimeAdvance(< S : Map | > CONF) = maxTimeAdvance(CONF) .
    eq maxTimeAdvance(< S : Field | > CONF) = min(untilTimerExpire(< S : Field | >), maxTimeAdvance(CONF)) .
    eq maxTimeAdvance(< S : Robot | handledTime : false > CONF) = min($maxTimeAdvanceRobot(< S : Robot | > CONF), maxTimeAdvance(< S : Robot | handledTime : true > CONF)) .
    eq maxTimeAdvance(dly(MSG, T) CONF) = min(T, maxTimeAdvance(CONF)).
    eq maxTimeAdvance(CONF) = inf [owise] .

    eq timeEffect(dly(MSG, T) CONF, T2) = dly(MSG, T monus T2) timeEffect(CONF, T) .

    ceq timeEffect(< S : Robot | state : STATE > CONF, T) = decreaseTimers(< S : Robot | >, T) timeEffect(CONF, T) if STATE =/= moving and STATE =/= crashed .
    eq timeEffect(< S : Robot | state : crashed > CONF, T) = < S : Robot | > timeEffect(CONF,T) .
    eq timeEffect(< S : Robot | state : moving, location : (X, Y), direction : north, speed : SP, remainingPath : (X2,Y2) LL > CONF, R) = decreaseTimers(< S : Robot | location : (X, Y + (SP * R)) >, R) timeEffect(CONF, R) .
    eq timeEffect(< S : Robot | state : moving, location : (X, Y), direction : east, speed : SP, remainingPath : (X2,Y2) LL > CONF, R) = decreaseTimers(< S : Robot | location : (X + (SP * R), Y) >, R) timeEffect(CONF, R) .
    eq timeEffect(< S : Robot | state : moving, location : (X, Y), direction : south, speed : SP, remainingPath : (X2,Y2) LL > CONF, R) = decreaseTimers(< S : Robot | location : (X, Y - (SP * R)) >, R) timeEffect(CONF, R) .
    eq timeEffect(< S : Robot | state : moving, location : (X, Y), direction : west, speed : SP, remainingPath : (X2,Y2) LL > CONF, R) = decreaseTimers(< S : Robot | location : (X - (SP * R), Y) >, R) timeEffect(CONF, R) .

    eq timeEffect(< S : Field | waterLevel : good, fertilizerLevel : good > CONF, T) = decreaseTimers(< S : Field | >, T) timeEffect(CONF, T) .
    eq timeEffect(< S : Field | waterTimer : TR, fertilizerTimer : TR2 > CONF, T) = < S : Field | waterTimer : decrease(TR, T), fertilizerTimer : decrease(TR2, T) > timeEffect(CONF, T) .
    eq timeEffect(CONF, T) = CONF [owise] .

    ceq detect(< S : Robot | location : (X, Y), detectionRange : N, detected : REP > < S2 : Obstacle | location : (X2,Y2) > CONF) =
        detect(< S : Robot | detected : {S2 : Obstacle | (X2,Y2)} REP > < S2 : Obstacle | > CONF) if < S : Robot | > detects < S2 : Obstacle | > .
    ceq detect(< S : Robot | location : (X, Y), detectionRange : N, detected : REP, workState : WS > < S2 : Robot | location : (X2,Y2), direction : D, speed : SP, workState : WS2 > CONF) =
        detect(< S : Robot | detected : {S2 : Robot | (X2,Y2) ; D ; detectedSpeed(SP)} REP > < S2 : Robot | > CONF) if (< S : Robot | > detects < S2 : Robot | >) .
    ceq detect(< S : Robot | location : (X, Y), detectionRange : N, detected : REP > < S2 : HumanVehicle | location : (X2,Y2), direction : D, speed : SP > CONF) =
        detect(< S : Robot | detected : {S2 : HumanVehicle | (X2,Y2) ; D ; detectedSpeed(SP)} REP > < S2 : HumanVehicle | > CONF) if < S : Robot | > detects < S2 : HumanVehicle | > . 
    eq detect(CONF) = CONF [owise] .

    crl [timeEffect] :
        CONF @ T
        =>
        ***forego detectiorange thingy for when there is an unavoidable crash.
        ***it happens in maxTimeAdvance, calls calculateAdvance.
        detect(handleCollisions(timeEffect(CONF, maxTimeAdvance(CONF)))) @ (T + maxTimeAdvance(CONF))
        if maxTimeAdvance(CONF) > 0 and maxTimeAdvance(CONF) < inf .
endom