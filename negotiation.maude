load cost .
load location .
omod NEGOTIATION is
    protecting LOCATION .
    protecting COST .
    
    sorts Negotiation NegotiationSet .
    subsort Negotiation < NegotiationSet .

    subsort String < Oid .

    op none : -> NegotiationSet [ctor] .
    op [_|_|_] : Oid Location Cost -> Negotiation [ctor] .
    op __ : NegotiationSet NegotiationSet -> NegotiationSet [ctor assoc comm id: none] .

    ***Creates a new negotiation with another robot, or updates an existing one.
    op addNegotiation : NegotiationSet Negotiation -> NegotiationSet .

    ***Removes a negotiation with the given Oid from the negotiation set.
    op endNegotiation : NegotiationSet Oid -> NegotiationSet .

    ***returns if the given oid is in the negotiationset.
    op inNegotiationSet : NegotiationSet Oid -> Bool .

    var OID : Oid .
    vars X X2 Y Y2 : Rat .
    vars COST COST2 : Cost .
    var NN : Negotiation .
    var NS : NegotiationSet .
    
    eq NN NN = NN .

    eq addNegotiation([OID | (X,Y) | COST] NS, [OID | (X2,Y2) | COST2]) = [OID | (X2,Y2) | COST2] NS .
    eq addNegotiation(NS, [OID | (X,Y) | COST]) = [OID | (X,Y) | COST] NS [owise] .

    eq endNegotiation([OID | (X,Y) | COST] NS, OID) = NS .
    eq endNegotiation(NS, OID) = NS [owise] .

    eq inNegotiationSet([OID | (X,Y) | COST] NS, OID) = true .
    eq inNegotiationSet(NS, OID) = false [owise] .
endom