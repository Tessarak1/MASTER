load timedFarm .

omod FINAL-TESTS is
  protecting TIMED-FARM .

  ops rob rob2 rob3 rob4 : -> Object .
  op farm : -> ClockedConfiguration .
  ops locations locations2 : -> Configuration .
  ops map map2 : -> Object .
  ops modMap2 : -> Object .
  op changedMap2 : -> Object . 
  ops GLREP1 GLREP2 GLREP3 GLREP4 : -> Object .
  ops GL1 GL2 GL3 GL4 : -> Object .
  ops I1 I2 I3 I4 I5 I6 I7 I8 I8 : -> Object .

  ops J1 J2 J3 J4 J5 J6 : -> Object .
  
  op pq : -> PQueue .
  op testInter : -> Object .

  ops resupply cpoint : -> Object .
  ops obstacles intersections : -> Configuration .

  eq rob = < "R1" : Worker | location : (60,0), speed : 1, direction : east, remainingPath : nil,
    state : idle, detected : nil, detectionRange : 5, handledTime : false, obstructionPoints : nil, cargoLevel : full, curCargo : water, 
    auctions : noAuction, curTask : noTask, workers : none, transporters : none, workState : noWork, waitingOn : none > .
  eq rob2 = < "R2" : Worker | location : (70,0), speed : 1, direction : west, remainingPath : (60,0),
    state : moving, detected : nil, detectionRange : 5, handledTime : false, obstructionPoints : nil, cargoLevel : full, curCargo : fertilizer, 
    auctions : noAuction, curTask : noTask, workers : "R1", workState : noWork, waitingOn : none > .  
  eq rob3 = < "R3" : Worker | location : (20,0), speed : 0, direction : east, remainingPath : nil,
    state : failed, detected : nil, detectionRange : 5, handledTime : false, obstructionPoints : nil, cargoLevel : full, curCargo : fertilizer, 
    auctions : noAuction, curTask : noTask, workers : "R1" "R2", transporters : none, workState : noWork > . 

  eq I1 = < "I1" : PassIntersection | location : (0,0), neighbors : "I2" "I4" "CPoint" > .
  eq I2 = < "I2" : PassIntersection | location : (60,0), neighbors : "I1" "I3" "I6" > .
  eq I3 = < "I3" : PassIntersection | location : (120,0), neighbors : "I2" "I8" "Resupply" > .
  eq I4 = < "I4" : PassIntersection | location : (0,-60), neighbors : "I1" "I5" > .
  eq I5 = < "I5" : PassIntersection | location : (30,-60)  , neighbors : "I4" "I6" "GL1" "GL3" > .
  eq I6 = < "I6" : PassIntersection | location : (60,-60)  , neighbors : "I5" "I7" "I2" > .
  eq I7 = < "I7" : PassIntersection | location : (90,-60)  , neighbors : "I6" "I8" "GL2" "GL4" > .
  eq I8 = < "I8" : PassIntersection | location : (120,-60)  , neighbors : "I7" "I3" > .

  eq J1 = < "J1" : PassIntersection | location : (0,0), neighbors : "J2" "J3" "J5" > .
  eq J2 = < "J2" : PassIntersection | location : (100,0), neighbors : "J1" "J4" "J6" > .
  eq J3 = < "J3" : PassIntersection | location : (0, -100), neighbors : "J1" "J4" > .
  eq J4 = < "J4" : PassIntersection | location : (100, -100), neighbors : "J2" "J3" > .
  eq J5 = < "J5" : PassIntersection | location : (0,100), neighbors : "J1" "J6" > .
  eq J6 = < "J6" : PassIntersection | location : (100, 100), neighbors : "J5" "J2" > .

  eq intersections = I1 I2 I3 I4 I5 I6 I7 I8 .

  eq GL1 = < "GL1" : Field | location : (30, -50), neighbors : "I5", growingState : growing, waterLevel : low, fertilizerLevel : good, 
    waterTimer : [cur: 0 - base: 1000], fertilizerTimer : [cur: 10000 - base: 100], growTimer : [cur: 10000 - base: 100], taskNr : 1,
    growingArea : area((10,-10), (50,-10), (10,-50), (50,-50)), workers : "R1", transporters : none,
    auctions : noAuction, reserved : false > .
  eq GL2 = < "GL2" : Field | location : (90, -50), neighbors : "I7", growingState : growing, waterLevel : low, fertilizerLevel : good, 
    waterTimer : [cur: 0 - base: 1000], fertilizerTimer : [cur: 10000 - base: 100], growTimer : [cur: 10000 - base: 100], taskNr : 1,
    growingArea : area((70,-10), (110,-10), (70, -50), (110,-50)), workers : "R1", transporters : none,
    auctions : noAuction, reserved : false > .
  eq GL3 = < "GL3" : Field | location : (30, -70), neighbors : "I5", growingState : harvest, waterLevel : low, fertilizerLevel : good, 
    waterTimer : [cur: 0 - base: 1000], fertilizerTimer : [cur: 10000 - base: 100], growTimer : [cur: 10000 - base: 100], taskNr : 1,
    growingArea : area((10,-70), (50,-70), (10,-110), (50,-110)), workers : "R1" "R2" "R3", transporters : none,
    auctions : noAuction > .
  eq GL4 = < "GL4" : Field | location : (90, -70), neighbors : "I7", growingState : harvest, waterLevel : low, fertilizerLevel : good, 
    waterTimer : [cur: 0 - base: 1000], fertilizerTimer : [cur: 10000 - base: 100], growTimer : [cur: 10000 - base: 100], taskNr : 1,
    growingArea : area((70,-70), (110,-70), (70,-110), (110,-110)), workers : "R1" "R2" "R3", transporters : none,
    auctions : noAuction > .
  eq GLREP1 = < "GL1" : Field | location : (30, -50), neighbors : "I5" > .
  eq GLREP2 = < "GL2" : Field | location : (90, -50), neighbors : "I7" >  .
  eq GLREP3 = < "GL3" : Field | location : (30,-70), neighbors : "I5" > .
  eq GLREP4 = < "GL4" : Field | location : (90,-70), neighbors : "I7" > .
  eq resupply = < "Resupply" : ResupplyStation | location : (120,40), neighbors : "I3" > .
  eq cpoint = < "CPoint" : CollectionStation | location : (0,40), neighbors : "I1" > .
  eq locations = I1 I2 I3 I4 I5 I6 I7 I8 GLREP1 GLREP2 GLREP3 GLREP4 resupply cpoint .
  eq obstacles = < "O1" : Obstacle | location : (0,-60) > < "O2" : Obstacle | location : (0,-58) > < "O3" : Obstacle | location : (2,-60) > .
  eq map = < "Map" : Map | allIntersections : locations, roads : createRoadSet(locations) > .
  eq map2 = < "Map 2" : Map | allIntersections : J1 J2 J3 J4 J5 J6, roads : createRoadSet(J1 J2 J3 J4 J5 J6) > .
  eq farm = map rob rob3 @ 0 .

  eq modMap2 = modifyMap(map2, (60,0), nil) .
endom

omod YIELD-TESTS is
    protecting ROBOT .
    protecting TIMED-FARM .

    op commonSet : -> AttributeSet .
    ops rob rob2 : -> Object .
    ops timeRob timeRob2 : -> Object .
    ops busyRob busyRob2 : -> Object .
    ops I1 I2 I3 I4 I5 I6 : -> Object .
    ops GL1 : -> Object .
    ops intersections1 : -> Configuration .
    op map1 : -> Object .

    ops 1on1IdleYield detectionTime : -> ClockedConfiguration .

    eq commonSet = speed : 1, maxSpeed : 1, detected : nil, detectionRange : 5,
      handledTime : false, obstructionPoints : nil, cargoLevel : full, curCargo : water, 
      auctions : noAuction, curTask : noTask, workState : noWork, waitingOn : none .

    eq rob = < "W1" : Worker | location : (40,0), state : idle, direction : west, workers : "W2", remainingPath : nil, commonSet > .
    eq rob2 = < "W2" : Worker | location : (0,0), state : moving, direction : east, workers : "W1", remainingPath : (100,0), commonSet > .
    
    eq timeRob = < "TW1" : Worker | location : (0,0), state : moving, direction : east, workers : "TW2", remainingPath : (100,0), commonSet > .
    eq timeRob2 = < "TW2" : Worker | location : (100,100), state : moving, direction : south, workers : "TW1", remainingPath : (100,50), commonSet > .

    eq I1 = < "I1" : PassIntersection | location : (0,0), neighbors : "I2" "I3" > .
    eq I2 = < "I2" : PassIntersection | location : (100,0), neighbors : "I1" "I4" "I5" "I6" > .
    eq I3 = < "I3" : PassIntersection | location : (0,-100), neighbors : "I4" "I1" > .
    eq I4 = < "I4" : PassIntersection | location : (100,-100), neighbors : "I2" "I3" > .
    eq I5 = < "I5" : PassIntersection | location : (200, 0), neighbors : "I2" > .
    eq I6 = < "I6" : PassIntersection | location : (100,100), neighbors : "I2" > .

    eq GL1 = < "GL1" : Growing

    eq intersections1 = I1 I2 I3 I4 I5 I6 .
    eq map1 = < "Map" : Map | allIntersections : intersections1, roads : createRoadSet(intersections1) > .
    
    ***Testing if an idle robot yields properly.
    eq 1on1IdleYield = rob rob2 map1 @ 0 .
    ***RESULT
    ***1 R2 moves into range of R1, detection happens for both.
    ***2 R1 dismisses detection since it is idle
    ***3 R2 parses detection, identifies that R1 is blocking path, stops and requests path adds id to waiting on.
    ***4 time passes for message to become active, causes both robots to detect each other again.
    ***5 R1 receives path request message, and sets remainingPath to yieldPath and returns yielding message
    ***6 R1 and R2 dismisses detections.
    ***Does some stuff (difficult to see differences, ask if it is possible to check rule application labels in cont.)

    eq detectionTime = timeRob timeRob2 map1 @ 0 .
endom


red $maxTimeAdvanceRobot("W2", < "W1" : Worker | auctions : noAuction, workers : "W2", location : (100, 0), handledTime : false, direction : north, speed : 1, maxSpeed : 1, remainingPath : (100, 1), state : moving, detectionRange : 5,
    cargoLevel : full, curCargo : water, detected : nil, obstructionPoints : nil, waitingOn : none, curTask : noTask, workState : noWork >
    < "W2" : Worker | auctions : noAuction, workers : "W1", location : (94, 0), handledTime : false, direction : east, speed : 1, maxSpeed : 1, 
    remainingPath : (100, 0), state : moving, detectionRange : 5, cargoLevel : full, curCargo : water, detected : nil, obstructionPoints : nil, waitingOn : none, curTask : noTask, workState : noWork >) .