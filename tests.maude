load timedFarm .
load human .
omod TIMED-TESTS is
  protecting TIMED-FARM .
  protecting HUMAN .

  ops init init2 init3 : -> ClockedConfiguration .
  ops I1 I2 I3 I4 I5 : -> Object .
  op G1 : -> Object .
  op R1 : -> Object .
  op T1 : -> Object .
  op C : -> Object .
  op Map : -> Object .
  eq I1 = < "I1" : Intersection | location : (0,0), neighbors : "I2" "I3" "C" > .
  eq I2 = < "I2" : Intersection | location : (5,0), neighbors : "I1" "I5" > .
  eq I3 = < "I3" : Intersection | location : (0,5), neighbors : "I1" "I4" > .
  eq I4 = < "I4" : Intersection | location : (10, 5), neighbors : "I3" "I5" > .
  eq I5 = < "I5" : Intersection | location : (10,0), neighbors : "I2" "I4" "G1" > .
  eq G1 = < "G1" : Greenhouse | location : (15,0), neighbors : "I5", growingState : growing, waterLevel : good, fertilizerLevel : good, content : pepper, waterTimer : 100, fertilizerTimer : 100, growTimer : 100, growingArea : area((15,0),(20,0),(15,5),(20,5)) > .
  eq R1 = < "R1" : Worker | location : (0,0), direction : north, speed : 1, remainingPath : nil, cargoLevel : full, curCargo : water, movementType : ground, state : idle > .
  eq T1 = < "T1" : Transporter | location : (15,0), direction : north, speed : 5, remainingPath : nil, cargoLevel : empty, state : idle > .
  eq C = < "C" : CPoint | location : (0,-5), storage : none, neighbors : "I1" > .
  eq Map =   < "Map" : Map | allIntersections : I1 I2 I3 I4 I5 G1 C > .
  eq init = R1 T1 G1 C Map (msg water "G1" from "G1" to worker) @ 0 .
  eq init2 = R1 G1 Map (msg water "G1" from "G1" to worker) @ 0 .
  eq init3 = T1 G1 C Map @ 0 .

  ***Solo robot tests with static obstacles.
  op MapSolo : -> Object . 
  ops RSolo RSolo2 : -> Object .
  op obstacles : -> Configuration .
  op initSolo : -> ClockedConfiguration .
  op conf : -> Configuration .

  vars CONF CONF2 CONF3 : Configuration .
  var T : Time .
  var O : Object .
  vars S S' : String .
  vars X X2 Y Y2 SP : Int .
  var N N' N2 N2' : Nat .
  var LL : List-Location .
  vars I I2 : Int .
  vars NI NI2 : NatInf .
  
  ops I11 I12 I13 I14 : -> Object .
  eq I11 = < "I11" : Intersection | location : (0,0), neighbors : "I12" "I13" > .
  eq I12 = < "I12" : Intersection | location : (5,0), neighbors : "I11" "I14" > .
  eq I13 = < "I13" : Intersection | location : (0,5), neighbors : "I11" "I14" > .
  eq I14 = < "I14" : Intersection | location : (5,5), neighbors : "I12" "I13" > .
  eq MapSolo = < "Map" : Map | allIntersections : I11 I12 I13 I14, paths : createPathSet(I11 I12 I13 I14) > .
  eq RSolo = < "R" : Transporter | location : (0,0), direction : east, speed : 1, remainingPath : (5,0) (5,5) (0,5), state : moving, detected : {"O" : Obstacle | (3,0)} > .
  eq obstacles = < "O" : Obstacle | location : (3,0) > .
  eq conf = MapSolo RSolo obstacles .
  eq initSolo = conf @ 0 .
endom

omod TESTS2 is 
  protecting TIMED-FARM .
  ops rob rob2 : -> Object .
  ops map map2 : -> Object .
  ops I1 I2 I3 I4 : -> Object .
  ops Line1 Line2 Line3 : -> Object .
  op obstacles : -> Configuration .
  ops init init2 : -> ClockedConfiguration .
  ops test test2 : -> Object .

  eq I1 = < "I1" : Intersection | location : (0,0), neighbors : "I2" "I3" > .
  eq I2 = < "I2" : Intersection | location : (5,0), neighbors : "I1" "I4" > .
  eq I3 = < "I3" : Intersection | location : (0,5), neighbors : "I1" "I4" > .
  eq I4 = < "I4" : Intersection | location : (5,5), neighbors : "I3" "I2" > .
  eq Line1 = < "Line1" : Intersection | location : (0,0), neighbors : "Line2" > .
  eq Line2 = < "Line2" : Intersection | location : (100,0), neighbors : "Line1" > .
  eq map = < "Map" : Map | allIntersections : I1 I2 I3 I4, paths : createPathSet(I1 I2 I3 I4) > .
  eq rob = < "R" : Worker | location : (0,0), speed : 10, direction : east, remainingPath : (100,0), state : moving, detected : nil, detectionRange : 10, waitTimer : 0 > .
  eq rob2 = < "R2" : Worker | location : (100,0), speed : 5, direction : west, remainingPath : (0,0), state : moving, detected : nil, detectionRange : 5, waitTimer : 0 > .
  eq obstacles = < "O" : Obstacle | location : (3,0) > .
  eq init = map rob obstacles @ 0 .

  eq map2 = < "Map2" : Map | allIntersections : Line1 Line2, paths : createPathSet(Line1 Line2) > .
  ops loc1 loc2 : -> Location .
  eq loc1 = (10/3, 10/4) .
  eq loc2 = (10/3, 20) .

  eq init2 = map2 rob rob2 @ 0 .
endom