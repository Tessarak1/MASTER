load location .
fmod ROAD is
    protecting LIST-LOCATION .
    protecting RAT .

    sorts Road RoadSet .
    subsort Road < RoadSet .

    op es : -> RoadSet [ctor] .
    op error : -> Road [ctor] .
    op {__} : Location Location -> Road [ctor comm] .
    op __ : RoadSet RoadSet -> RoadSet [assoc comm id: es] .

    ***Checks if the first int is in the interval between the two other ints.
    op _inRange(_,_) : Rat Rat Rat -> Bool .
    op _inRange(_) : Location Road -> Bool .
    op _\_ : RoadSet RoadSet -> RoadSet .
    op commonIntersection : Road Road -> Bool [comm] .

    vars I I2 I3 : Rat .
    vars X X2 X3 Y Y2 Y3 : Rat .
    vars PS PS2 : RoadSet .
    vars P P2 : Road .

    eq {(X,Y) (X2,Y2)} {(X,Y) (X2,Y2)} = {(X,Y) (X2,Y2)} .

    ceq I inRange(I2, I3) = true if I <= max(I2,I3) and I >= min(I2,I3) .
    eq I inRange(I2, I3) = false [owise] .

    ceq (X,Y) inRange({(X2,Y2) (X3,Y3)}) = true if X inRange(X2,X3) and Y inRange(Y2,Y3) .
    eq (X,Y) inRange({(X2,Y2) (X3,Y3)}) = false [owise] .

    eq ({(X,Y) (X2,Y2)} PS) \ ({(X,Y) (X2,Y2)} PS2) = PS \ PS2 .
    eq PS \ PS2 = PS [owise] .

    eq commonIntersection({(X,Y) (X2,Y2)}, {(X2,Y2) (X3,Y3)}) = true .
    eq commonIntersection(P, P2) = false [owise] .
endfm
