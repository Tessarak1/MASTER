load location .
fmod ROAD is
    protecting LIST-LOCATION .
    protecting RAT .

    sorts Road RoadSet .
    subsort Road < RoadSet .

    ***RoadSet constructors. A road is defined by two locations on the same axis.
    op {__} : Location Location -> Road [ctor comm] .
    op noRoad : -> RoadSet [ctor] .
    op _,_ : RoadSet RoadSet -> RoadSet [assoc comm id: noRoad] .

    op findRoad : List-Location RoadSet -> RoadSet .
    op splitRoad : Location Road RoadSet -> RoadSet .
    ***Checks if the first rat is in the interval between the two others.
    op _inRange(_,_) : Rat Rat Rat -> Bool .
    op _inRange(_) : Location Road -> Bool .
    op _\_ : RoadSet RoadSet -> RoadSet .
    op commonIntersection : Road Road -> Bool [comm] .
    op size : RoadSet -> Nat .

    vars R R2 R3 : Rat .
    vars X X2 X3 Y Y2 Y3 : Rat .
    vars RS RS2 : RoadSet .
    vars RO RO2 : Road .
    var LL : List-Location .

    eq ({(X,Y) (X2,Y2)} , {(X,Y) (X2,Y2)}) = {(X,Y) (X2,Y2)} .

    eq findRoad((X,Y) LL, noRoad) = noRoad .
    eq findRoad(nil, RS) = noRoad .
    ceq findRoad((X,Y) LL, (RO , RS)) = (RO , findRoad((X,Y) LL, RS))
        if (X,Y) inRange(RO) .
    eq findRoad((X,Y) LL, RS) = findRoad(LL, RS) [owise] .

    eq splitRoad((X,Y), {(X2,Y2) (X3,Y3)}, ({(X2,Y2) (X3,Y3)} , RS)) = ({(X,Y) (X2,Y2)} , {(X,Y) (X3,Y3)} , RS) .
    eq splitRoad((X,Y), {(X2,Y2) (X3,Y3)}, RS) = ({(X,Y) (X2,Y2)} , {(X,Y) (X3,Y3)} , RS) [owise] .

    ceq R inRange(R2, R3) = true if R <= max(R2,R3) and R >= min(R2,R3) .
    eq R inRange(R2, R3) = false [owise] .
    ceq (X,Y) inRange({(X2,Y2) (X3,Y3)}) = true if X inRange(X2,X3) and Y inRange(Y2,Y3) .
    eq (X,Y) inRange({(X2,Y2) (X3,Y3)}) = false [owise] .

    eq ({(X,Y) (X2,Y2)} , RS) \ ({(X,Y) (X2,Y2)} , RS2) = RS \ RS2 .
    eq RS \ RS2 = RS [owise] .

    eq commonIntersection({(X,Y) (X2,Y2)}, {(X2,Y2) (X3,Y3)}) = true .
    eq commonIntersection(RO, RO2) = false [owise] .

    eq size(noRoad) = 0 .
    eq size(RO , RS) = 1 + size(RS) .
endfm
