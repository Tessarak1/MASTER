load intersection
load path
***allIntersections is a config, that consist exclusively of Intersection objects
omod MAP is 
    protecting INTERSECTION .
    protecting LIST-LOCATION .
    protecting PATH .
    class Map | allIntersections : Configuration, paths : PathSet .

    ***return intersection with given location.
    op returnByLocation : Configuration List-Location -> Configuration .
    op returnByLocation : Configuration PathSet -> Configuration .
    ***return intersection with given name.
    op returnByName : Configuration Oid -> Configuration .
    op $removeConnection : PathSet Configuration -> Configuration .
    op removeConnection : PathSet Configuration -> Configuration .
    op removeIntersection : String Configuration -> Configuration .
    op newNeighbor : String OidSet Configuration -> Configuration .
    op createPathSet : Configuration -> PathSet .
    op findPath : List-Location PathSet -> PathSet .
    op getIntersections : Object -> Configuration .
    op getPathSet : Object -> PathSet .
    op $newIntersection : Location Path Object -> Object .
    op newIntersection : Location Object -> Configuration .
    op $addPath : Location Path PathSet -> PathSet .
    op addPath : Location Path PathSet -> PathSet .

    vars X X2 X3 Y Y2 Y3 : Int .
    vars S S2 : String .
    var CONF : Configuration .
    var O : Object .
    vars OS OS2 : OidSet .
    var LL : List-Location .
    var L : Location .
    var PS PS2 : PathSet .

    eq returnByLocation(< S : Intersection | location : (X, Y) > CONF, (X, Y) LL) = < S : Intersection | > returnByLocation(CONF, LL) .
    eq returnByLocation(< S : Intersection | location : (X, Y) > < S2 : Intersection | location : (X2, Y2) > CONF, {(X, Y) (X2, Y2)} PS) = < S : Intersection | > < S2 : Intersection | > returnByLocation(CONF, PS) .
    eq returnByLocation(CONF, LL) = none [owise] .

    eq returnByName(< S : Intersection | > CONF, S) = < S : Intersection | > .
    eq returnByName(CONF, S) = none [owise] .

    eq $removeConnection(es, CONF) = CONF .
    eq $removeConnection({(X,Y) (X2,Y2)} PS, < S : Intersection | location : (X,Y), neighbors : S2 OS > < S2 : Intersection | location : (X2,Y2), neighbors : S OS2 > CONF) =
        $removeConnection(PS, < S : Intersection | neighbors : OS > < S2 : Intersection | neighbors : OS2 > CONF) .

    ***Removes the corresponding neighbors and updates pathset.
    eq removeConnection(PS, < S : Map | allIntersections : CONF, paths : PS2 >) =
        < S : Map | allIntersections : $removeConnection(PS, CONF), paths : removePaths(PS2, PS) > .

    eq removeIntersection(S, < S : Intersection | > CONF) = CONF .

    eq newNeighbor(S, none, CONF) = CONF .
    eq newNeighbor(S, S2 OS, < S2 : Intersection | neighbors : OS2 > CONF) = < S2 : Intersection | neighbors : S OS2 > newNeighbor(S, OS, CONF) .

    eq createPathSet(none) = es .
    eq createPathSet(< S : Intersection | neighbors : none > CONF) = createPathSet(CONF) .
    eq createPathSet(< S : Intersection | location : (X,Y), neighbors : S2 OS > < S2 : Intersection | location : (X2,Y2), neighbors : S OS2 > CONF) =
        {(X,Y) (X2,Y2)} createPathSet(< S : Intersection | neighbors : OS > < S2 : Intersection | neighbors : OS2 > CONF) .

    eq findPath((X,Y) LL, es) = error .
    eq findPath(nil, PS) = es .
    ceq findPath((X,Y) LL, {(X2,Y2) (X3,Y3)} PS) = {(X2,Y2) (X3,Y3)} findPath(LL, PS) if (X,Y) inRange({(X2,Y2) (X3,Y3)}) .
    
    ***used when a new intersection at (X,Y) is added to map.
    ***removes the path between (X2, Y2) and (X3,Y3) and sets (X,Y) between .

    eq addPath((X,Y), {(X2,Y2) (X3,Y3)}, {(X2,Y2) (X3,Y3)} PS) = {(X,Y) (X2,Y2)} {(X,Y) (X3,Y3)} PS .
    eq addPath((X,Y), {(X2,Y2) (X3,Y3)}, PS) = {(X,Y) (X2,Y2)} {(X,Y) (X3,Y3)} PS [owise] .

    ***location of new intersection, path it interrupts and the map.
    eq $newIntersection((X,Y), {(X2,Y2) (X3,Y3)}, < S : Map | allIntersections : CONF, paths : PS >) =
        < S : Map | allIntersections : < "Temporary" : Intersection | location : (X,Y), neighbors : oidSet(returnByLocation(CONF, (X2,Y2) (X3,Y3))) > 
        newNeighbor("Temporary", oidSet(returnByLocation(CONF, (X2,Y2) (X3,Y3))), CONF),
        paths : addPath((X,Y), {(X2,Y2) (X3,Y3)}, PS) > .

    eq newIntersection((X,Y), < S : Map | allIntersections : CONF, paths : PS >) =
        if findPath((X,Y), PS) =/= error then
            $newIntersection((X,Y), findPath((X,Y), PS), removeConnection(findPath((X,Y), PS), < S : Map | >))
        else
            ***not supposed to happen as newIntersection is only called when a robot needs to replan path and is between two intersections.
            none
        fi .

    eq getIntersections(< S : Map | allIntersections : CONF >) = CONF .
    eq getPathSet(< S : Map | paths : PS >) = PS .
endom