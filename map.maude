load intersection
load road
***allIntersections is a config, that consist exclusively of Intersection objects
omod MAP is 
    protecting INTERSECTION .
    protecting LIST-LOCATION .
    protecting ROAD .
    class Map | allIntersections : Configuration, roads : RoadSet .

    op returnByLocation : Configuration List-Location -> Configuration .
    op returnByLocation : Configuration RoadSet -> Configuration .
    op $removeConnection : RoadSet Configuration -> Configuration .
    op removeConnection : RoadSet Object -> Object .
    op removeConnection : Object List-Location -> Object .
    op newNeighbor : String OidSet Configuration -> Configuration .
    op createRoadSet : Configuration -> RoadSet .
    op findRoad : List-Location RoadSet -> RoadSet .
    op getIntersections : Object -> Configuration .
    op getRoadSet : Object -> RoadSet .
    op $newIntersection : Location Road Object Nat -> Object .
    op $newIntersectionCounter : List-Location Object Nat -> Object .
    op newIntersection : Object List-Location -> Object .
    op $addRoad : Location Road RoadSet -> RoadSet .
    op addRoad : Location Road RoadSet -> RoadSet .
    op outsideMap : Location RoadSet -> Bool .
    op addAndRemove : Object List-Location List-Location -> Object .

    vars X X2 X3 Y Y2 Y3 : Rat .
    vars OID OID2 : String .
    var CONF : Configuration .
    var O : Object .
    vars OS OS2 : OidSet .
    vars LL LL2 : List-Location .
    var L : Location .
    var PS PS2 : RoadSet .
    var AS : AttributeSet .
    var N : Nat .

    ***Adds intersections at locations specified by LL.
    ***Removes connections between intersections if the roads between them overlap with points specified by LL2.
    ***Used to perform roadfinding for robots that are not at intersections and may have detected obstacles.
    eq addAndRemove(< OID : Map | >, LL, LL2) = removeConnection(newIntersection(< OID : Map | >, LL), LL2) .
    ***Checks if a location is outside of the area defined by the map.
    ceq outsideMap((X,Y), {(X2,Y2) (X3,Y3)} PS) = false if between((X,Y), (X2,Y2) (X3,Y3)) =/= nil .
    eq outsideMap((X,Y), PS) = true [owise] .
    eq returnByLocation(< OID : Intersection | location : (X, Y) > CONF, (X, Y) LL) = < OID : Intersection | > returnByLocation(CONF, LL) .
    eq returnByLocation(CONF, LL) = none [owise] .

    eq $removeConnection(es, CONF) = CONF .
    eq $removeConnection({(X,Y) (X2,Y2)} PS, < OID : Intersection | location : (X,Y), neighbors : OID2 OS > < OID2 : Intersection | location : (X2,Y2), neighbors : OID OS2 > CONF) =
        $removeConnection(PS, < OID : Intersection | neighbors : OS > < OID2 : Intersection | neighbors : OS2 > CONF) .
    eq removeConnection(< OID : Map | allIntersections : CONF, roads : PS >, LL) =
        < OID : Map | allIntersections : $removeConnection(findRoad(LL, PS), CONF), roads : PS \ findRoad(LL, PS) > .
    
    eq newNeighbor(OID, none, CONF) = CONF .
    eq newNeighbor(OID, OID2 OS, < OID2 : Intersection | neighbors : OS2 > CONF) = < OID2 : Intersection | neighbors : OID OS2 > newNeighbor(OID, OS, CONF) .
    eq createRoadSet(none) = es .
    eq createRoadSet(< OID : Intersection | neighbors : none > CONF) = createRoadSet(CONF) .
    eq createRoadSet(< OID : Intersection | location : (X,Y), neighbors : OID2 OS > < OID2 : Intersection | location : (X2,Y2), neighbors : OID OS2 > CONF) =
        {(X,Y) (X2,Y2)} createRoadSet(< OID : Intersection | neighbors : OS > < OID2 : Intersection | neighbors : OS2 > CONF) .

    eq findRoad((X,Y) LL, es) = es .
    eq findRoad(nil, PS) = es .
    ceq findRoad((X,Y) LL, {(X2,Y2) (X3,Y3)} PS) = {(X2,Y2) (X3,Y3)} findRoad((X,Y) LL, PS) if (X,Y) inRange({(X2,Y2) (X3,Y3)}) .
    eq findRoad((X,Y) LL, {(X2,Y2) (X3,Y3)} PS) = findRoad(LL, {(X2,Y2) (X3,Y3)} PS) [owise] .

    eq addRoad((X,Y), {(X2,Y2) (X3,Y3)}, {(X2,Y2) (X3,Y3)} PS) = {(X,Y) (X2,Y2)} {(X,Y) (X3,Y3)} PS .
    eq addRoad((X,Y), {(X2,Y2) (X3,Y3)}, PS) = {(X,Y) (X2,Y2)} {(X,Y) (X3,Y3)} PS [owise] .
    eq $newIntersection((X,Y), {(X2,Y2) (X3,Y3)}, < OID : Map | allIntersections : CONF, roads : PS >, N) =
        < OID : Map | allIntersections : < string(N, 10) : Intersection | location : (X,Y), neighbors : oidSet(returnByLocation(CONF, (X2,Y2) (X3,Y3))) > 
            newNeighbor(string(N, 10), oidSet(returnByLocation(CONF, (X2,Y2) (X3,Y3))), CONF),
            roads : addRoad((X,Y), {(X2,Y2) (X3,Y3)}, PS) > .
    eq $newIntersectionCounter(nil, < OID : Map | >, N) = < OID : Map | > .
    eq $newIntersectionCounter((X,Y) LL, < OID : Map | allIntersections : CONF, roads : PS >, N) =
        if (findRoad((X,Y), PS) == es) or (returnByLocation(CONF, (X,Y)) =/= none)
        then
            $newIntersectionCounter(LL, < OID : Map | >, N)
        else
            $newIntersectionCounter(LL, $newIntersection((X,Y), findRoad((X,Y), PS), removeConnection(< OID : Map | >, (X,Y)), N), N + 1)
        fi .
    eq newIntersection(< OID : Map | >, LL) =
        $newIntersectionCounter(LL, < OID : Map | >, 0) .

    eq getIntersections(< OID : Map | allIntersections : CONF >) = CONF .
    eq getRoadSet(< OID : Map | roads : PS >) = PS .
endom