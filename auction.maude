load sorts .
load oidSet .
load time-inf .
load nat-inf .
omod AUCTION is
    protecting SORTS .
    protecting OID-SET .
    protecting TIMER .
    protecting NAT-INF .
    ***Sorts for task auctioning
    sort Bid .
    sort Auction .
    op noBid : -> Bid [ctor] .
    op noAuction : -> Auction [ctor] .
    op __ : Bid Bid -> Bid [assoc comm ctor id: noBid] .
    op __ : Auction Auction -> Auction [assoc comm ctor id: noAuction] .
    op [_bids_] : Oid Nat -> Bid .
    op [Task:__|_] : Tid Timer Bid -> Auction .

    op readyToDetermine : Auction OidSet -> Bool .
    op determineWinner : Bid Oid NatInf -> Oid .
    op allBidsReceived : Bid OidSet -> Bool .
    op closed : Tid Auction -> Bool .
    op bidders : Bid -> OidSet .

    var TID : Tid .
    var T : Timer .
    var B : Bid .
    var AU : Auction .
    var OS : OidSet .
    vars OID OID2 : Oid .
    vars NI NI2 : NatInf .

    eq closed(TID, [Task: TID T | B] AU) = false .
    eq closed(TID, AU) = true [owise] .
    eq bidders(noBid) = none .
    eq bidders([OID bids NI] B) = OID bidders(B) .

    eq allBidsReceived(B, OS) = (OS \ bidders(B)) == none .
    
    ceq readyToDetermine([Task: TID T | B], OS) = true if expired(T) or allBidsReceived(B, OS) .
    eq readyToDetermine(AU, OS) = false [owise] .
    eq determineWinner(noBid, OID, NI) = OID .
    eq determineWinner([OID bids NI] B, OID2, NI2) =
        if NI < NI2
        then
            determineWinner(B, OID, NI)
        else
            determineWinner(B, OID2, NI2)
        fi .
endom