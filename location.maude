fmod LOCATION is 
    protecting CONVERSION .
    ***Sort Area denotes a rectangular area, the locationSet denotes the four corners of said area.
    sorts Location LocationSet Area .
    subsort Location < LocationSet .
    op ((_,_)) : Rat Rat -> Location [ctor] .
    op none : -> LocationSet [ctor] .
    op _,_ : LocationSet LocationSet -> LocationSet [ctor assoc comm] .
    op area : LocationSet -> Area [ctor] .
    op failLocation : -> LocationSet [ctor] .

    op _inInterval(_,_) : Rat Rat Rat -> Bool .

    ***Gives the distance between two points, only works on points that are aligned at at least one of the axes.
    op distance : Location Location -> Rat [comm] .
    op difference : Rat Rat -> Rat .
    op sqrt : Rat -> Rat .
    
    ***Checks if a point is inside an area.
    op _inArea_ : Location Area -> Bool .
    op makeArea : Location Rat -> Area .
    
    vars X X2 X3 Y Y2 Y3 : Rat .
    vars R R2 R3 : Rat .

    ceq X inInterval(X2, X3) = true if (X >= min(X2,X3) and X <= max(X2,X3)) .
    eq X inInterval(X2,X3) = false [owise] .
    eq sqrt(R) = rat(sqrt(float(R))) .
    eq distance((X,Y), (X2,Y2)) = sqrt(((X - X2) ^ 2) + ((Y - Y2) ^ 2)) .
    
    ceq (X,Y) inArea area((X2,Y2), (X3,Y2), (X3,Y3), (X2, Y3)) = true if (X inInterval(X2,X3) and Y inInterval(Y2,Y3)) .
    eq (X,Y) inArea area((X2,Y2), (X3,Y2), (X3,Y3), (X2,Y3)) = false [owise] .

    eq makeArea((X,Y), R) = area((X + R, Y + R),(X + R, Y - R), (X - R, Y + R), (X - R, Y - R)) .
endfm

fmod LIST-LOCATION is
    protecting LOCATION .
    sort List-Location .
    subsort Location < List-Location .

    op nil : -> List-Location [ctor] .
    op __ : List-Location List-Location -> List-Location [assoc id: nil ctor] .
    op first : List-Location -> Location .
    op last : List-Location -> Location  .
    op between : Location List-Location -> List-Location .
    op remove : List-Location List-Location -> List-Location .
    op listLength : List-Location -> Rat .
        
    vars LL LL2 LL3 LL4 : List-Location .
    vars L L2 : Location .
    vars X X2 X3 Y Y2 Y3 : Rat .

    eq first(nil) = nil .
    eq first(L LL) = L .

    eq last(nil) = nil .
    eq last(LL L) = L .

    eq between(L, nil) = nil .
    eq between(L, (X,Y)) = nil .
    eq between((X, Y), (X2, Y2) (X3, Y3) LL) =
        if ((X inInterval(X2,X3)) and (Y inInterval(Y2,Y3))) then
            (X2, Y2) (X3,Y3)
        else
            between((X,Y), (X3,Y3) LL)
        fi .
    eq remove(nil, LL) = nil .
    eq remove(LL, nil) = LL .
    eq remove(LL (X,Y) LL2, LL3 (X,Y) LL4) = remove(LL LL2, LL3 LL4) .
    eq remove(LL, LL2) = LL [owise] .
    eq listLength((X,Y) (X2,Y2) LL) = distance((X,Y), (X2,Y2)) + listLength((X2,Y2) LL) .
    eq listLength((X,Y) (X2,Y2)) = distance((X,Y), (X2,Y2)) .
    eq listLength(LL) = 0 [owise] .
endfm

