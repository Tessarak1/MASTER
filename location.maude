fmod LOCATION is 
    protecting CONVERSION .
    ***Sort Area denotes a rectangular area, the locationSet denotes the four corners of said area.
    sorts Location LocationSet Area .
    subsort Location < LocationSet .
    op (_ , _) : Int Int -> Location [ctor] .
    op none : -> LocationSet [ctor] .
    op _,_ : LocationSet LocationSet -> LocationSet [ctor assoc comm] .
    op area : LocationSet -> Area [ctor] .
    op failLocation : -> LocationSet [ctor] .

    op _inInterval(_,_) : Int Int Int -> Bool .

    ***Gives the distance between two points, only works on points that are aligned at at least one of the axes.
    op distance : Location Location -> Nat [comm] .
    op difference : Nat Nat -> Nat .
    
    ***Checks if a point is inside an area.
    op _inArea_ : Location Area -> Bool .
    ***Returns a square area of diameter 2N centered on point (X,Y)
    op makeArea : Location Nat -> Area .

    vars X X2 X3 Y Y2 Y3 : Int .
    var N : Nat .
    var R R2 : Rat .

    ceq X inInterval(X2, X3) = true if (X >= min(X2,X3) and X <= max(X2,X3)) .
    eq X inInterval(X2,X3) = false [owise] .

    eq difference(R, R2) = max(R, R2) - min(R,R2) .

    eq distance((X,Y), (X,Y2)) = difference(Y, Y2) .
    eq distance((X,Y), (X2,Y)) = difference(X, X2) .

    ceq (X,Y) inArea area((X2,Y2), (X3,Y2), (X3,Y3), (X2, Y3)) = true if (X inInterval(X2,X3) and Y inInterval(Y2,Y3)) .
    eq (X,Y) inArea area((X2,Y2), (X3,Y2), (X3,Y3), (X2,Y3)) = false [owise] .

    eq makeArea((X,Y), N) = area((X + N, Y + N),(X + N, Y - N), (X - N, Y + N), (X - N, Y - N)) .
endfm

fmod LIST-LOCATION is
    protecting LOCATION .
    sort List-Location .
    subsort Location < List-Location .

    op nil : -> List-Location [ctor] .
    op __ : List-Location List-Location -> List-Location [assoc id: nil ctor] .
    op first : List-Location -> Location .
    op last : List-Location -> Location  .
    op between : Location List-Location -> List-Location .

    var LL : List-Location .
    var L : Location .
    vars X X2 X3 Y Y2 Y3 : Int .

    eq first(nil) = nil .
    eq first(L LL) = L .

    eq last(nil) = nil .
    eq last(LL L) = L .

    eq between(L, nil) = nil .
    eq between(L, (X,Y)) = nil .
    eq between((X, Y), (X2, Y2) (X3, Y3) LL) =
        if ((X inInterval(X2,X3)) and (Y inInterval(Y2,Y3))) then
            (X2, Y2) (X3,Y3)
        else
            between((X,Y), (X3,Y3) LL)
        fi .
endfm