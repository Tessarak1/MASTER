fmod TIME-INF is 
    protecting RAT .
    sorts Time TimeInf .
    subsorts Rat < Time < TimeInf .

    sort timeInterval .

    op inf : -> TimeInf [ctor] .
    op interval : TimeInf TimeInf -> timeInterval [ctor] .
    op intervalOverlap : timeInterval timeInterval -> Bool [comm] .

    op _<_ : TimeInf TimeInf -> Bool [ditto] .
    op _<=_ : TimeInf TimeInf -> Bool [ditto] .
    op _>_ : TimeInf TimeInf -> Bool [ditto] .
    op _>=_ : TimeInf TimeInf -> Bool [ditto] .

    vars T T' T2 T2' : Time .
    vars INF INF' : TimeInf .

    eq T < inf = true .
    eq inf < INF = false .
    eq INF <= inf = true .
    eq inf <= T = false .
    eq inf > T = true . 
    eq INF > inf = false .
    eq inf >= INF = true .
    eq T >= inf = false .
    
    ops min max : TimeInf TimeInf -> TimeInf [ditto] .
    eq max(INF, inf) = inf .
    eq min(INF, inf) = INF .

    ceq intervalOverlap(interval(T, T'), interval(T2, T2')) = true if T <= T2 and T2 <= T' .
    eq intervalOverlap(interval(T, T'), interval(T2, T2')) = false [owise] .
endfm 

omod TIMER is
    protecting TIME-INF .

    sorts Timer TimerSet .
    subsort Timer < TimerSet .

    op none : -> TimerSet [ctor] .
    op __ : TimerSet TimerSet -> TimerSet [ctor assoc comm id: none] .
    op [cur:_- base:_] : Time Time -> Timer [ctor] .
    op minusToZero : Time Time -> Time .
    op reset : Timer -> Timer .
    op decrease : Timer Time -> Timer .
    op expired : Timer -> Bool .
    ***Objects with timers overload this to decrease all timers when used.
    op decreaseTimers : Object Time -> Object .
    ***overload to check when the first timer would go to zero.
    op untilTimerExpire : Object -> Time .
    op minCur : TimerSet -> Time .

    vars T T2 T3 : Time .
    var TS : TimerSet .
    var TR : Timer .
    var AS : AttributeSet .
    var O : Oid .
    var C : Cid .
    var A : Attribute .

    eq minusToZero(T, T2) = if (T - T2) < 0 then 0 else T - T2 fi .
    eq reset([cur: T - base: T2]) = [cur: T2 - base: T2] .
    eq decrease([cur: T - base: T2], T3) = [cur: minusToZero(T, T3) - base: T2] .
    eq expired([cur: 0 - base: T2]) = true .
    eq expired(TR) = false [owise] .
    eq minCur(none) = inf .
    eq minCur([cur: T - base: T2] TS) = min(T, minCur(TS)) .
endom