load rat-inf .

fmod TIME-INF is 
    protecting RAT-INF .

    sorts Time TimeInf .

    subsort Rat < Time .
    subsorts RatInf Time < TimeInf .

    op _<_ : TimeInf TimeInf -> Bool [ditto] .
    op _<=_ : TimeInf TimeInf -> Bool [ditto] .
    op _>_ : TimeInf TimeInf -> Bool [ditto] .
    op _>=_ : TimeInf TimeInf -> Bool [ditto] .
    vars TIME TIME' TIME2 TIME2' : Time .
    vars INF INF' : TimeInf .

    eq TIME < ratInf = true .
    eq ratInf < INF = false .
    eq INF <= ratInf = true .
    eq ratInf <= TIME = false .
    eq ratInf > TIME = true . 
    eq INF > ratInf = false .
    eq ratInf >= INF = true .
    eq TIME >= ratInf = false .

    ops min max : TimeInf TimeInf -> TimeInf [ditto] .
    eq max(INF, ratInf) = ratInf .
    eq min(INF, ratInf) = INF .

endfm 

omod TIMER is
    protecting TIME-INF .

    sorts Timer TimerSet .
    subsort Timer < TimerSet .

    op noTimer : -> TimerSet [ctor] .
    op __ : TimerSet TimerSet -> TimerSet [ctor assoc comm id: noTimer] .
    op [cur:_- base:_] : Time Time -> Timer [ctor] .
    op _monus_ : Time Time -> Time .
    op reset : Timer -> Timer .
    op decrease : Timer Time -> Timer .
    ***For a set as well
    op expired : Timer -> Bool .
    op decreaseTimers : Object Time -> Object .
    op minTimer : TimerSet -> Time .

    vars TIME TIME2 TIME3 : Time .
    var TS : TimerSet .
    var TR : Timer .

    eq TIME monus TIME2 = if (TIME - TIME2) < 0 then 0 else TIME - TIME2 fi .

    eq reset([cur: TIME - base: TIME2]) = [cur: TIME2 - base: TIME2] .

    eq decrease([cur: TIME - base: TIME2], TIME3) = [cur: TIME monus TIME3 - base: TIME2] .
    
    eq expired([cur: TIME - base: TIME2]) = TIME == 0 .

    eq minTimer(noTimer) = ratInf .
    eq minTimer([cur: TIME - base: TIME2] TS) = min(TIME, minTimer(TS)) .
endom