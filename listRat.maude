fmod LIST-RAT is
    protecting CONVERSION .

    ***Sort to implement the quadratic formula to check for time advance between robots on different axes.
    sort List-Rat .
    
    subsort Rat < List-Rat .

    op nil : -> List-Rat [ctor] .
    op _;_ : List-Rat List-Rat -> List-Rat [assoc ctor id: nil] .
    ops $quadraticFormulaMinus $quadraticFormulaPlus : Rat Rat Rat -> Rat .
    op validFormula : Rat Rat Rat -> Bool .
    op quadraticFormula : Rat Rat Rat -> List-Rat .
    op minElement : List-Rat -> Rat .
    op posOnly : List-Rat -> List-Rat .

    vars R R2 R3 : Rat .
    vars LR LR2 : List-Rat .

    ***Need to also check that error doesnt occur.
    eq minElement(R) = R .
    eq minElement(R ; R2 ; LR) = if R >= R2 then minElement(R2 ; LR) else minElement(R ; LR) fi .
    ceq posOnly(LR ; R ; LR2) = posOnly(LR ; LR2) if R < 0 .
    eq posOnly(LR) = LR [owise] .

    eq $quadraticFormulaMinus(R, R2, R3) = ((-1 * R2) - rat(sqrt(float((R2 ^ 2) - (4 * R * R3))))) / (2 * R) . 
    eq $quadraticFormulaPlus(R, R2, R3) = ((-1 * R2) + rat(sqrt(float((R2 ^ 2) - (4 * R * R3))))) / (2 * R) . 

    eq quadraticFormula(R, R2, R3) = 
        if ((R2 ^ 2) - (4 * R * R3)) < 0
        then
            nil
        else
            if posOnly($quadraticFormulaMinus(R, R2, R3) ; $quadraticFormulaPlus(R, R2, R3)) == nil
            then
                nil
            else
                minElement(posOnly($quadraticFormulaMinus(R, R2, R3) ; $quadraticFormulaPlus(R, R2, R3)))
            fi
        fi .
endfm