load message .

omod AUCTIONEER is
    protecting AUCTION .
    protecting MESSAGE .

    sorts BidMsgContent AuctionMsgContent .
    subsort BidMsgContent < AuctionMsgContent < MsgContent .
    class Auctioneer | auctions : Auction, workers : OidSet, transporters : OidSet, taskNr : Nat .

    op handleBidMsg : Object Msg -> Object .
    op bid_on_ : Rat Tid -> BidMsgContent [ctor] .
    op busy_ : Tid -> BidMsgContent [ctor] .
    ops won_ reject_ accept_ : Tid -> AuctionMsgContent [ctor] .
    op taskId : AuctionMsgContent -> Tid .
    op bmcToBid : Msg -> Bid .
    op startAuction : Object TidSet -> Configuration .
    op needToStartAuction : Object -> Bool .

    vars S S2 : String .
    var R : Rat .
    var TID : Tid .
    var TIDS : TidSet .
    var AU : Auction .
    var MSG : Msg .
    var AMC : AuctionMsgContent .
    var BMC : BidMsgContent .
    var T : Timer .
    var B : Bid .
    var TPT : TransporterTask .
    var WT : WorkerTask .
    var OS : OidSet .

    eq taskId(bid R on TID) = TID .
    eq taskId(busy TID) = TID .
    eq taskId(won TID) = TID .
    eq taskId(reject TID) = TID .
    eq taskId(accept TID) = TID .
    eq bmcToBid(msg bid R on TID from S to S2) = [S bids R] .
    eq bmcToBid(msg reject TID from S to S2) = [S rejects] .
    eq startAuction(< S : Auctioneer | >, none) = < S : Auctioneer | > .
    eq startAuction(< S : Auctioneer | auctions : AU, workers : OS >, [S2, WT, R] TIDS) = broadcast(S, [S2, WT, R], OS) startAuction(< S : Auctioneer | auctions : [Task: [S2, WT, R] auctionTimer | noBid] AU >, TIDS) .
    eq startAuction(< S : Auctioneer | auctions : AU, transporters : OS >, [S2, TPT, R] TIDS) =  broadcast(S, [S2, TPT, R], OS) startAuction(< S : Auctioneer | auctions : [Task: [S2, TPT, R] auctionTimer | noBid] AU >, TIDS) .
    eq handleBidMsg(< S : Auctioneer | auctions : [Task: [S, TPT, R] T | B] AU, transporters : OS >, msg BMC from S2 to S) =
        if allBidsReceived(bmcToBid(msg BMC from S2 to S) B, OS)
        then
            < S : Auctioneer | auctions : [Task: [S, TPT, R] T | bmcToBid(msg BMC from S2 to S) B] AU >
            msg won [S, TPT, R] from S to determineWinner(bmcToBid(msg BMC from S2 to S) B, S, ratInf)
        else
            < S : Auctioneer | auctions : [Task: [S, TPT, R] T | bmcToBid(msg BMC from S2 to S) B] AU >
        fi .
    eq handleBidMsg(< S : Auctioneer | auctions : [Task: [S, WT, R] T | B] AU, workers : OS >, msg BMC from S2 to S) =
        if allBidsReceived(bmcToBid(msg BMC from S2 to S) B, OS)
        then
            < S : Auctioneer | auctions : [Task: [S, WT, R] T | bmcToBid(msg BMC from S2 to S) B] AU >
            dly(msg won [S, WT, R] from S to determineWinner(bmcToBid(msg BMC from S2 to S) B, S, ratInf), 1)
        else
            < S : Auctioneer | auctions : [Task: [S, WT, R] T | bmcToBid(msg BMC from S2 to S) B] >
        fi .

    crl [rcvBidMsg] :
        < S : Auctioneer | auctions : [Task: TID T | B] >
        msg BMC from S2 to S
        =>
        handleBidMsg(< S : Auctioneer | >, msg BMC from S2 to S)
        if taskId(BMC) == TID .
    rl [rcvAcceptMsg] :
        < S : Auctioneer | auctions : [Task: TID T | B] AU >
        msg accept TID from S2 to S
        =>
        < S : Auctioneer | auctions : AU > .
    rl [rcvRejectMsg] :
        < S : Auctioneer | auctions : [Task: TID T | [S2 bids R] B] AU >
        msg reject TID from S2 to S
        =>
        if bidders(B) == none
        then
            startAuction(< S : Auctioneer | auctions : AU >, TID)
        else
            < S : Auctioneer | >
            dly(msg won TID from S to determineWinner(B, S, ratInf), MSG-DELAY)
        fi .
endom 