load message .

omod AUCTIONEER is
    protecting AUCTION .
    protecting MESSENGER .

    ***BidMsg sort to differentiate from other messages when pattern matching.
    sorts BidMsgContent AuctionMsgContent .
    subsort BidMsgContent AuctionMsgContent < MsgContent .

    class Auctioneer | auctions : AuctionSet .
    
    subclass Auctioneer < Messenger .

    ***Message content to facilitate auctions
    op bid_on_ : Cost Tid -> BidMsgContent [ctor] .
    op busy_ : Tid -> BidMsgContent [ctor] .
    ops won_ reject_ accept_ : Tid -> AuctionMsgContent [ctor] .

    ***Creates an auction for every task in the TidSet and broadcasts it within range.
    op initiateAuction : Object TidSet Configuration -> Configuration .

    ***Overloaded in subclasses to determine if theo bject needs to start auctioning a task.
    op needToStartAuction : Object -> Bool .

    ***winAuction is overloaded in robot. Determines if it accepts the task or not.
    op winAuction : Object Tid -> Configuration .

    vars OID OID2 : Oid .
    var R : Rat .
    var TID : Tid .
    var TIDS : TidSet .
    var AUS : AuctionSet .
    var MSG : Msg .
    var BMC : BidMsgContent .
    var TR : Timer .
    var T : Time .
    var BS : BidSet .
    var TPT : TransporterTask .
    var WT : WorkerTask .
    var OS : OidSet .
    var CONF : Configuration .
    vars COST : Cost .

    eq initiateAuction(< OID : Auctioneer | >, none, CONF) = < OID : Auctioneer | > CONF .
    eq initiateAuction(< OID : Auctioneer | auctions : AUS >, TIDS, CONF) =
        broadcastInRange(< OID : Auctioneer | >, tidToMsgContent(TIDS), CONF) < OID : Auctioneer | auctions  : AUS createAuction(TIDS) > .

    ***Determines the winner of an auction when its timer runs out.
    rl [auctionTimerExpire] :
        < OID : Auctioneer | auctions : [Task: TID [cur: 0 - base: T] | BS] AUS >
        =>
        ***TODO: Fix behavior here
        < OID : Auctioneer | > .

    ***Adds bid to the auction
    rl [rcvBidMsg] :
        < OID : Auctioneer | auctions : [Task: TID TR | BS] AUS >
        msg bid COST on TID from OID2 to OID
        =>
        < OID : Auctioneer | auctions : [Task: TID TR | [OID2 bids COST] BS] AUS > .

    ***Close the auction when a winner has accepted the task.
    rl [rcvAcceptMsg] :
        < OID : Auctioneer | auctions : [Task: TID TR | BS] AUS >
        msg accept TID from OID2 to OID
        =>
        < OID : Auctioneer | auctions : AUS > .


    ***If the winner of the auction has become unable to complete the task, determine another winner or retry the auction.
    rl [rcvRejectMsg] :
        < OID : Auctioneer | auctions : [Task: TID TR | [OID2 bids R] BS] AUS >
        CONF
        msg reject TID from OID2 to OID
        =>
        if bidders(BS) == none
        then
            initiateAuction(< OID : Auctioneer | auctions : AUS >, TID, CONF)
        else
            ***another auction winner is guaranteed as BS is not empty.
            < OID : Auctioneer | >
            dly(msg won TID from OID to auctionWinner(BS, "Placeholder", ratInf), MSG-DELAY)
        fi .
endom