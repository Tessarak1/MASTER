(X,Y) map

thin paths one robot at a time.
distributed timeEffect function
instead of distributing the function to one at a time, just have it include the context object.
 
Call maxTimeAdvance on the config
each call has pattern < O : Object | > CONF 

Abstracted away from modeling acceleration, deacceleration,

In this model I am most interested in verifying whether or not the robots are able to account for humans in the smart farm.

Sensors in greenhouses and fields to detect moisture levels to request resources from the robots.

every entity in the model moves in one of the four cardinal directions for ease of modeling, and follows the roads.

Focus on "rural road" logistics

cant "overload" a subclass attribute.
    lets say I want entity to have a state attribute, and the subclasses to define the different ops for State. Doesnt work.
    entity | state : State
    human | state : HumanState
        doesnt work.
        ***Only difference is what contents there are. However, maude does not have built-in attribute overloading for subclasses . This means that it is not possible to have
    ***general rules for the superclass regarding the attribute, and also constrain that attribute's sort to a certain subsort in a subclass.
    ***This is relevant here since the only difference between a Field and a Greenhouse is the sort of produce that can grow there.
    ***It is not possible without modifying class behavior to have a general rule for Growing-loc regardless of content, while constraining the
    ***sort of content for field and greenhouse. This means that in the spec a field can technically have the same contents as a greenhouse.
    ***However, in practice the rules are designed to check for which class it is, to ensure that the correct seed is planted.
      ***Since the map is defined as a set of points, and growing locations need to cover an area there is one point that designates the "entrance" to the field or greenhouse
    ***I assume that growing locations are squares or rectangles.
    ***The growing loc is an object that has an attribute "area" which consists of four locations, denoting the corners of the area.
    ***The location therefore represents the entrance to the growing location, while the four points in area denotes the actual space that the growing location occupies.
    ***Since this is a real-time system we need to keep some semblance of time.
    ***WaterTimer, FertilizerTimer and timeToGrow change waterLevel fertilizerLevel and state respectively.
 
